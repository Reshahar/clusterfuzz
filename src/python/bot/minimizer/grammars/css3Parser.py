# Generated from css3.g4 by ANTLR 4.7.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"@\u045a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
        buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
        buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
        buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
        buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
        buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA")
        buf.write(u"\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\t")
        buf.write(u"J\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\3\2\3\2\3\2\7\2")
        buf.write(u"\u00a4\n\2\f\2\16\2\u00a7\13\2\7\2\u00a9\n\2\f\2\16\2")
        buf.write(u"\u00ac\13\2\3\2\3\2\7\2\u00b0\n\2\f\2\16\2\u00b3\13\2")
        buf.write(u"\7\2\u00b5\n\2\f\2\16\2\u00b8\13\2\3\2\3\2\7\2\u00bc")
        buf.write(u"\n\2\f\2\16\2\u00bf\13\2\7\2\u00c1\n\2\f\2\16\2\u00c4")
        buf.write(u"\13\2\3\2\3\2\7\2\u00c8\n\2\f\2\16\2\u00cb\13\2\7\2\u00cd")
        buf.write(u"\n\2\f\2\16\2\u00d0\13\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\5\3\u00de\n\3\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00fa\n\4\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\5\5\u0101\n\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\5\3\5\5\5\u010d\n\5\3\5\3\5\3\5\5\5\u0112")
        buf.write(u"\n\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\7\b\u0121\n\b\f\b\16\b\u0124\13\b\5\b\u0126\n\b")
        buf.write(u"\3\b\3\b\3\t\5\t\u012b\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write(u"\t\7\t\u0134\n\t\f\t\16\t\u0137\13\t\3\t\3\t\3\t\3\t")
        buf.write(u"\3\t\7\t\u013e\n\t\f\t\16\t\u0141\13\t\5\t\u0143\n\t")
        buf.write(u"\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u014e")
        buf.write(u"\n\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\5\r\u0159")
        buf.write(u"\n\r\3\r\3\r\3\r\5\r\u015e\n\r\3\r\3\r\3\r\5\r\u0163")
        buf.write(u"\n\r\7\r\u0165\n\r\f\r\16\r\u0168\13\r\3\r\3\r\3\r\3")
        buf.write(u"\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\7\17\u0176")
        buf.write(u"\n\17\f\17\16\17\u0179\13\17\3\20\3\20\3\20\3\20\3\20")
        buf.write(u"\3\20\7\20\u0181\n\20\f\20\16\20\u0184\13\20\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u018e\n\21\3\22\3")
        buf.write(u"\22\5\22\u0192\n\22\3\22\3\22\3\22\3\22\3\22\7\22\u0199")
        buf.write(u"\n\22\f\22\16\22\u019c\13\22\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\6\22\u01a3\n\22\r\22\16\22\u01a4\5\22\u01a7\n\22\3\23")
        buf.write(u"\5\23\u01aa\n\23\3\23\3\23\3\24\3\24\5\24\u01b0\n\24")
        buf.write(u"\3\24\3\24\3\25\3\25\3\26\5\26\u01b7\n\26\3\26\3\26\3")
        buf.write(u"\27\3\27\3\27\3\30\3\30\3\30\5\30\u01c1\n\30\3\30\3\30")
        buf.write(u"\3\30\3\30\3\30\3\30\5\30\u01c9\n\30\3\30\3\30\5\30\u01cd")
        buf.write(u"\n\30\3\30\3\30\3\31\3\31\5\31\u01d3\n\31\3\31\3\31\5")
        buf.write(u"\31\u01d7\n\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\5\33\u01e5\n\33\3\33\6\33\u01e8")
        buf.write(u"\n\33\r\33\16\33\u01e9\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u01f8\n\35\3\36\3")
        buf.write(u"\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0202\n\36\3\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u020d\n")
        buf.write(u"\37\3 \3 \3 \3 \5 \u0213\n \3 \3 \3 \3 \7 \u0219\n \f")
        buf.write(u" \16 \u021c\13 \3 \3 \3 \5 \u0221\n \3 \3 \3 \5 \u0226")
        buf.write(u"\n \3!\3!\7!\u022a\n!\f!\16!\u022d\13!\3!\3!\3!\3!\3")
        buf.write(u"!\5!\u0234\n!\7!\u0236\n!\f!\16!\u0239\13!\3\"\3\"\3")
        buf.write(u"\"\3\"\3\"\5\"\u0240\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u0247")
        buf.write(u"\n\"\3#\3#\3#\3$\3$\3$\3$\3$\6$\u0251\n$\r$\16$\u0252")
        buf.write(u"\3%\3%\5%\u0257\n%\3%\7%\u025a\n%\f%\16%\u025d\13%\3")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&")
        buf.write(u"\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0279\n&\3\'\3\'\3\'\3\'")
        buf.write(u"\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3*\5*\u028b\n*\3")
        buf.write(u"*\3*\3+\5+\u0290\n+\3+\3+\3,\5,\u0295\n,\3,\3,\3-\5-")
        buf.write(u"\u029a\n-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(u".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.")
        buf.write(u"\3.\3.\3.\7.\u02bf\n.\f.\16.\u02c2\13.\3.\3.\3.\3.\3")
        buf.write(u".\3.\3.\7.\u02cb\n.\f.\16.\u02ce\13.\3.\3.\3.\3.\3.\3")
        buf.write(u".\3.\7.\u02d7\n.\f.\16.\u02da\13.\3.\3.\3.\5.\u02df\n")
        buf.write(u".\3/\3/\3/\7/\u02e4\n/\f/\16/\u02e7\13/\3/\3/\3/\5/\u02ec")
        buf.write(u"\n/\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write(u"\3\61\3\61\3\61\5\61\u02fb\n\61\3\62\3\62\3\62\3\62\3")
        buf.write(u"\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0308\n\62\f\62")
        buf.write(u"\16\62\u030b\13\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write(u"\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u031a\n\63\3\64\3")
        buf.write(u"\64\3\64\7\64\u031f\n\64\f\64\16\64\u0322\13\64\3\64")
        buf.write(u"\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3")
        buf.write(u"\66\3\66\5\66\u0331\n\66\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write(u"\3\67\3\67\5\67\u033b\n\67\38\38\38\38\38\38\39\39\3")
        buf.write(u"9\39\39\39\39\39\39\39\69\u034d\n9\r9\169\u034e\3:\3")
        buf.write(u":\3:\3:\3:\3:\3:\3:\3:\3:\6:\u035b\n:\r:\16:\u035c\3")
        buf.write(u";\3;\3;\3;\3;\3<\3<\3<\7<\u0367\n<\f<\16<\u036a\13<\3")
        buf.write(u"<\3<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3?\3?\3?")
        buf.write(u"\3?\3?\3?\3?\3?\3?\7?\u0384\n?\f?\16?\u0387\13?\3@\3")
        buf.write(u"@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0393\n@\f@\16@\u0396\13")
        buf.write(u"@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A")
        buf.write(u"\3A\5A\u03aa\nA\3B\3B\3B\3B\3B\5B\u03b1\nB\3B\3B\3B\5")
        buf.write(u"B\u03b6\nB\7B\u03b8\nB\fB\16B\u03bb\13B\3B\3B\3B\3C\3")
        buf.write(u"C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u03ca\nC\3D\3D\3D\3D\3D")
        buf.write(u"\3D\3D\3D\3D\3D\3D\3D\3E\3E\3E\3E\5E\u03dc\nE\3E\3E\3")
        buf.write(u"E\7E\u03e1\nE\fE\16E\u03e4\13E\3F\3F\3F\3F\3F\3F\3F\7")
        buf.write(u"F\u03ed\nF\fF\16F\u03f0\13F\3G\3G\3G\3G\3G\5G\u03f7\n")
        buf.write(u"G\3G\3G\3G\3H\3H\3H\3H\3H\3H\3H\5H\u0403\nH\3H\3H\3H")
        buf.write(u"\3I\3I\3I\3I\3I\3I\3I\7I\u040f\nI\fI\16I\u0412\13I\3")
        buf.write(u"I\3I\3I\3J\3J\3J\3J\3J\3J\7J\u041d\nJ\fJ\16J\u0420\13")
        buf.write(u"J\3K\3K\3K\3K\3K\7K\u0427\nK\fK\16K\u042a\13K\5K\u042c")
        buf.write(u"\nK\3L\3L\3L\3L\3L\5L\u0433\nL\3L\3L\3L\3L\5L\u0439\n")
        buf.write(u"L\7L\u043b\nL\fL\16L\u043e\13L\3L\3L\3L\3M\3M\3N\3N\3")
        buf.write(u"N\3N\3N\3N\3N\3N\7N\u044d\nN\fN\16N\u0450\13N\3O\3O\3")
        buf.write(u"P\7P\u0455\nP\fP\16P\u0458\13P\3P\2\2Q\2\4\6\b\n\f\16")
        buf.write(u"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BD")
        buf.write(u"FHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write(u"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write(u"\u009a\u009c\u009e\2\13\3\2\22\25\4\2  ..\3\2\"#\5\2")
        buf.write(u"\r\r\26\27/\61\3\2\'(\4\2\4\4@@\4\2\37\37\66\67\6\2\"")
        buf.write(u"$\64\64\66\67??\3\2\22\23\2\u04ba\2\u00a0\3\2\2\2\4\u00dd")
        buf.write(u"\3\2\2\2\6\u00f9\3\2\2\2\b\u0111\3\2\2\2\n\u0113\3\2")
        buf.write(u"\2\2\f\u0115\3\2\2\2\16\u0125\3\2\2\2\20\u0142\3\2\2")
        buf.write(u"\2\22\u0144\3\2\2\2\24\u0146\3\2\2\2\26\u0152\3\2\2\2")
        buf.write(u"\30\u0155\3\2\2\2\32\u016c\3\2\2\2\34\u0170\3\2\2\2\36")
        buf.write(u"\u017a\3\2\2\2 \u018d\3\2\2\2\"\u01a6\3\2\2\2$\u01a9")
        buf.write(u"\3\2\2\2&\u01af\3\2\2\2(\u01b3\3\2\2\2*\u01b6\3\2\2\2")
        buf.write(u",\u01ba\3\2\2\2.\u01bd\3\2\2\2\60\u01d0\3\2\2\2\62\u01d8")
        buf.write(u"\3\2\2\2\64\u01e7\3\2\2\2\66\u01eb\3\2\2\28\u01f7\3\2")
        buf.write(u"\2\2:\u0201\3\2\2\2<\u020c\3\2\2\2>\u0225\3\2\2\2@\u022b")
        buf.write(u"\3\2\2\2B\u0246\3\2\2\2D\u0248\3\2\2\2F\u0250\3\2\2\2")
        buf.write(u"H\u0254\3\2\2\2J\u0278\3\2\2\2L\u027a\3\2\2\2N\u0280")
        buf.write(u"\3\2\2\2P\u0286\3\2\2\2R\u028a\3\2\2\2T\u028f\3\2\2\2")
        buf.write(u"V\u0294\3\2\2\2X\u0299\3\2\2\2Z\u02de\3\2\2\2\\\u02e0")
        buf.write(u"\3\2\2\2^\u02ed\3\2\2\2`\u02fa\3\2\2\2b\u02fc\3\2\2\2")
        buf.write(u"d\u0319\3\2\2\2f\u031b\3\2\2\2h\u0326\3\2\2\2j\u0330")
        buf.write(u"\3\2\2\2l\u033a\3\2\2\2n\u033c\3\2\2\2p\u0342\3\2\2\2")
        buf.write(u"r\u0350\3\2\2\2t\u035e\3\2\2\2v\u0363\3\2\2\2x\u036d")
        buf.write(u"\3\2\2\2z\u0374\3\2\2\2|\u037a\3\2\2\2~\u0388\3\2\2\2")
        buf.write(u"\u0080\u03a9\3\2\2\2\u0082\u03ab\3\2\2\2\u0084\u03c9")
        buf.write(u"\3\2\2\2\u0086\u03cb\3\2\2\2\u0088\u03e2\3\2\2\2\u008a")
        buf.write(u"\u03e5\3\2\2\2\u008c\u03f1\3\2\2\2\u008e\u03fb\3\2\2")
        buf.write(u"\2\u0090\u0407\3\2\2\2\u0092\u0416\3\2\2\2\u0094\u042b")
        buf.write(u"\3\2\2\2\u0096\u042d\3\2\2\2\u0098\u0442\3\2\2\2\u009a")
        buf.write(u"\u0444\3\2\2\2\u009c\u0451\3\2\2\2\u009e\u0456\3\2\2")
        buf.write(u"\2\u00a0\u00aa\5\u009eP\2\u00a1\u00a5\5\4\3\2\u00a2\u00a4")
        buf.write(u"\t\2\2\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5")
        buf.write(u"\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a9\3\2\2")
        buf.write(u"\2\u00a7\u00a5\3\2\2\2\u00a8\u00a1\3\2\2\2\u00a9\u00ac")
        buf.write(u"\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab")
        buf.write(u"\u00b6\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00b1\5\6\4")
        buf.write(u"\2\u00ae\u00b0\t\2\2\2\u00af\u00ae\3\2\2\2\u00b0\u00b3")
        buf.write(u"\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2")
        buf.write(u"\u00b5\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00ad\3\2\2")
        buf.write(u"\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7")
        buf.write(u"\3\2\2\2\u00b7\u00c2\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b9")
        buf.write(u"\u00bd\5\b\5\2\u00ba\u00bc\t\2\2\2\u00bb\u00ba\3\2\2")
        buf.write(u"\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be")
        buf.write(u"\3\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2\u00c0")
        buf.write(u"\u00b9\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2\2")
        buf.write(u"\2\u00c2\u00c3\3\2\2\2\u00c3\u00ce\3\2\2\2\u00c4\u00c2")
        buf.write(u"\3\2\2\2\u00c5\u00c9\5d\63\2\u00c6\u00c8\t\2\2\2\u00c7")
        buf.write(u"\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2")
        buf.write(u"\2\u00c9\u00ca\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9")
        buf.write(u"\3\2\2\2\u00cc\u00c5\3\2\2\2\u00cd\u00d0\3\2\2\2\u00ce")
        buf.write(u"\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\3\3\2\2\2\u00d0")
        buf.write(u"\u00ce\3\2\2\2\u00d1\u00d2\7\35\2\2\u00d2\u00d3\5\u009e")
        buf.write(u"P\2\u00d3\u00d4\7.\2\2\u00d4\u00d5\5\u009eP\2\u00d5\u00d6")
        buf.write(u"\7\3\2\2\u00d6\u00d7\5\u009eP\2\u00d7\u00de\3\2\2\2\u00d8")
        buf.write(u"\u00d9\7\35\2\2\u00d9\u00da\5\u009eP\2\u00da\u00db\7")
        buf.write(u".\2\2\u00db\u00dc\5\u009eP\2\u00dc\u00de\3\2\2\2\u00dd")
        buf.write(u"\u00d1\3\2\2\2\u00dd\u00d8\3\2\2\2\u00de\5\3\2\2\2\u00df")
        buf.write(u"\u00e0\7\31\2\2\u00e0\u00e1\5\u009eP\2\u00e1\u00e2\t")
        buf.write(u"\3\2\2\u00e2\u00e3\5\u009eP\2\u00e3\u00e4\5\16\b\2\u00e4")
        buf.write(u"\u00e5\7\3\2\2\u00e5\u00e6\5\u009eP\2\u00e6\u00fa\3\2")
        buf.write(u"\2\2\u00e7\u00e8\7\31\2\2\u00e8\u00e9\5\u009eP\2\u00e9")
        buf.write(u"\u00ea\t\3\2\2\u00ea\u00eb\5\u009eP\2\u00eb\u00ec\7\3")
        buf.write(u"\2\2\u00ec\u00ed\5\u009eP\2\u00ed\u00fa\3\2\2\2\u00ee")
        buf.write(u"\u00ef\7\31\2\2\u00ef\u00f0\5\u009eP\2\u00f0\u00f1\t")
        buf.write(u"\3\2\2\u00f1\u00f2\5\u009eP\2\u00f2\u00f3\5\16\b\2\u00f3")
        buf.write(u"\u00fa\3\2\2\2\u00f4\u00f5\7\31\2\2\u00f5\u00f6\5\u009e")
        buf.write(u"P\2\u00f6\u00f7\t\3\2\2\u00f7\u00f8\5\u009eP\2\u00f8")
        buf.write(u"\u00fa\3\2\2\2\u00f9\u00df\3\2\2\2\u00f9\u00e7\3\2\2")
        buf.write(u"\2\u00f9\u00ee\3\2\2\2\u00f9\u00f4\3\2\2\2\u00fa\7\3")
        buf.write(u"\2\2\2\u00fb\u00fc\7\34\2\2\u00fc\u0100\5\u009eP\2\u00fd")
        buf.write(u"\u00fe\5\n\6\2\u00fe\u00ff\5\u009eP\2\u00ff\u0101\3\2")
        buf.write(u"\2\2\u0100\u00fd\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102")
        buf.write(u"\3\2\2\2\u0102\u0103\t\3\2\2\u0103\u0104\5\u009eP\2\u0104")
        buf.write(u"\u0105\7\3\2\2\u0105\u0106\5\u009eP\2\u0106\u0112\3\2")
        buf.write(u"\2\2\u0107\u0108\7\34\2\2\u0108\u010c\5\u009eP\2\u0109")
        buf.write(u"\u010a\5\n\6\2\u010a\u010b\5\u009eP\2\u010b\u010d\3\2")
        buf.write(u"\2\2\u010c\u0109\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e")
        buf.write(u"\3\2\2\2\u010e\u010f\t\3\2\2\u010f\u0110\5\u009eP\2\u0110")
        buf.write(u"\u0112\3\2\2\2\u0111\u00fb\3\2\2\2\u0111\u0107\3\2\2")
        buf.write(u"\2\u0112\t\3\2\2\2\u0113\u0114\5\u009cO\2\u0114\13\3")
        buf.write(u"\2\2\2\u0115\u0116\7\33\2\2\u0116\u0117\5\u009eP\2\u0117")
        buf.write(u"\u0118\5\16\b\2\u0118\u0119\5f\64\2\u0119\u011a\5\u009e")
        buf.write(u"P\2\u011a\r\3\2\2\2\u011b\u0122\5\20\t\2\u011c\u011d")
        buf.write(u"\7*\2\2\u011d\u011e\5\u009eP\2\u011e\u011f\5\20\t\2\u011f")
        buf.write(u"\u0121\3\2\2\2\u0120\u011c\3\2\2\2\u0121\u0124\3\2\2")
        buf.write(u"\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0126")
        buf.write(u"\3\2\2\2\u0124\u0122\3\2\2\2\u0125\u011b\3\2\2\2\u0125")
        buf.write(u"\u0126\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\5\u009e")
        buf.write(u"P\2\u0128\17\3\2\2\2\u0129\u012b\t\4\2\2\u012a\u0129")
        buf.write(u"\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write(u"\u012d\5\u009eP\2\u012d\u012e\5\22\n\2\u012e\u0135\5")
        buf.write(u"\u009eP\2\u012f\u0130\7$\2\2\u0130\u0131\5\u009eP\2\u0131")
        buf.write(u"\u0132\5\24\13\2\u0132\u0134\3\2\2\2\u0133\u012f\3\2")
        buf.write(u"\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136")
        buf.write(u"\3\2\2\2\u0136\u0143\3\2\2\2\u0137\u0135\3\2\2\2\u0138")
        buf.write(u"\u013f\5\24\13\2\u0139\u013a\7$\2\2\u013a\u013b\5\u009e")
        buf.write(u"P\2\u013b\u013c\5\24\13\2\u013c\u013e\3\2\2\2\u013d\u0139")
        buf.write(u"\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f")
        buf.write(u"\u0140\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2")
        buf.write(u"\2\u0142\u012a\3\2\2\2\u0142\u0138\3\2\2\2\u0143\21\3")
        buf.write(u"\2\2\2\u0144\u0145\5\u009cO\2\u0145\23\3\2\2\2\u0146")
        buf.write(u"\u0147\7\4\2\2\u0147\u0148\5\u009eP\2\u0148\u014d\5\26")
        buf.write(u"\f\2\u0149\u014a\7\5\2\2\u014a\u014b\5\u009eP\2\u014b")
        buf.write(u"\u014c\5H%\2\u014c\u014e\3\2\2\2\u014d\u0149\3\2\2\2")
        buf.write(u"\u014d\u014e\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0150")
        buf.write(u"\7\6\2\2\u0150\u0151\5\u009eP\2\u0151\25\3\2\2\2\u0152")
        buf.write(u"\u0153\5\u009cO\2\u0153\u0154\5\u009eP\2\u0154\27\3\2")
        buf.write(u"\2\2\u0155\u0156\7\32\2\2\u0156\u0158\5\u009eP\2\u0157")
        buf.write(u"\u0159\5\32\16\2\u0158\u0157\3\2\2\2\u0158\u0159\3\2")
        buf.write(u"\2\2\u0159\u015a\3\2\2\2\u015a\u015b\7\7\2\2\u015b\u015d")
        buf.write(u"\5\u009eP\2\u015c\u015e\5B\"\2\u015d\u015c\3\2\2\2\u015d")
        buf.write(u"\u015e\3\2\2\2\u015e\u0166\3\2\2\2\u015f\u0160\7\3\2")
        buf.write(u"\2\u0160\u0162\5\u009eP\2\u0161\u0163\5B\"\2\u0162\u0161")
        buf.write(u"\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164")
        buf.write(u"\u015f\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2")
        buf.write(u"\2\u0166\u0167\3\2\2\2\u0167\u0169\3\2\2\2\u0168\u0166")
        buf.write(u"\3\2\2\2\u0169\u016a\7\b\2\2\u016a\u016b\5\u009eP\2\u016b")
        buf.write(u"\31\3\2\2\2\u016c\u016d\7\5\2\2\u016d\u016e\5\u009cO")
        buf.write(u"\2\u016e\u016f\5\u009eP\2\u016f\33\3\2\2\2\u0170\u0177")
        buf.write(u"\5\36\20\2\u0171\u0172\7*\2\2\u0172\u0173\5\u009eP\2")
        buf.write(u"\u0173\u0174\5\36\20\2\u0174\u0176\3\2\2\2\u0175\u0171")
        buf.write(u"\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177")
        buf.write(u"\u0178\3\2\2\2\u0178\35\3\2\2\2\u0179\u0177\3\2\2\2\u017a")
        buf.write(u"\u017b\5\"\22\2\u017b\u0182\5\u009eP\2\u017c\u017d\5")
        buf.write(u" \21\2\u017d\u017e\5\"\22\2\u017e\u017f\5\u009eP\2\u017f")
        buf.write(u"\u0181\3\2\2\2\u0180\u017c\3\2\2\2\u0181\u0184\3\2\2")
        buf.write(u"\2\u0182\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183\37\3")
        buf.write(u"\2\2\2\u0184\u0182\3\2\2\2\u0185\u0186\7\'\2\2\u0186")
        buf.write(u"\u018e\5\u009eP\2\u0187\u0188\7)\2\2\u0188\u018e\5\u009e")
        buf.write(u"P\2\u0189\u018a\7+\2\2\u018a\u018e\5\u009eP\2\u018b\u018c")
        buf.write(u"\7\23\2\2\u018c\u018e\5\u009eP\2\u018d\u0185\3\2\2\2")
        buf.write(u"\u018d\u0187\3\2\2\2\u018d\u0189\3\2\2\2\u018d\u018b")
        buf.write(u"\3\2\2\2\u018e!\3\2\2\2\u018f\u0192\5$\23\2\u0190\u0192")
        buf.write(u"\5*\26\2\u0191\u018f\3\2\2\2\u0191\u0190\3\2\2\2\u0192")
        buf.write(u"\u019a\3\2\2\2\u0193\u0199\7\30\2\2\u0194\u0199\5,\27")
        buf.write(u"\2\u0195\u0199\5.\30\2\u0196\u0199\5\60\31\2\u0197\u0199")
        buf.write(u"\5\66\34\2\u0198\u0193\3\2\2\2\u0198\u0194\3\2\2\2\u0198")
        buf.write(u"\u0195\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0197\3\2\2")
        buf.write(u"\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b")
        buf.write(u"\3\2\2\2\u019b\u01a7\3\2\2\2\u019c\u019a\3\2\2\2\u019d")
        buf.write(u"\u01a3\7\30\2\2\u019e\u01a3\5,\27\2\u019f\u01a3\5.\30")
        buf.write(u"\2\u01a0\u01a3\5\60\31\2\u01a1\u01a3\5\66\34\2\u01a2")
        buf.write(u"\u019d\3\2\2\2\u01a2\u019e\3\2\2\2\u01a2\u019f\3\2\2")
        buf.write(u"\2\u01a2\u01a0\3\2\2\2\u01a2\u01a1\3\2\2\2\u01a3\u01a4")
        buf.write(u"\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write(u"\u01a7\3\2\2\2\u01a6\u0191\3\2\2\2\u01a6\u01a2\3\2\2")
        buf.write(u"\2\u01a7#\3\2\2\2\u01a8\u01aa\5&\24\2\u01a9\u01a8\3\2")
        buf.write(u"\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac")
        buf.write(u"\5(\25\2\u01ac%\3\2\2\2\u01ad\u01b0\5\u009cO\2\u01ae")
        buf.write(u"\u01b0\7\t\2\2\u01af\u01ad\3\2\2\2\u01af\u01ae\3\2\2")
        buf.write(u"\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2")
        buf.write(u"\7\n\2\2\u01b2\'\3\2\2\2\u01b3\u01b4\5\u009cO\2\u01b4")
        buf.write(u")\3\2\2\2\u01b5\u01b7\5&\24\2\u01b6\u01b5\3\2\2\2\u01b6")
        buf.write(u"\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9\7\t\2")
        buf.write(u"\2\u01b9+\3\2\2\2\u01ba\u01bb\7\13\2\2\u01bb\u01bc\5")
        buf.write(u"\u009cO\2\u01bc-\3\2\2\2\u01bd\u01be\7\f\2\2\u01be\u01c0")
        buf.write(u"\5\u009eP\2\u01bf\u01c1\5&\24\2\u01c0\u01bf\3\2\2\2\u01c0")
        buf.write(u"\u01c1\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3\5\u009c")
        buf.write(u"O\2\u01c3\u01cc\5\u009eP\2\u01c4\u01c5\t\5\2\2\u01c5")
        buf.write(u"\u01c8\5\u009eP\2\u01c6\u01c9\5\u009cO\2\u01c7\u01c9")
        buf.write(u"\7.\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c7\3\2\2\2\u01c9")
        buf.write(u"\u01ca\3\2\2\2\u01ca\u01cb\5\u009eP\2\u01cb\u01cd\3\2")
        buf.write(u"\2\2\u01cc\u01c4\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce")
        buf.write(u"\3\2\2\2\u01ce\u01cf\7\16\2\2\u01cf/\3\2\2\2\u01d0\u01d2")
        buf.write(u"\7\5\2\2\u01d1\u01d3\7\5\2\2\u01d2\u01d1\3\2\2\2\u01d2")
        buf.write(u"\u01d3\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d7\5\u009c")
        buf.write(u"O\2\u01d5\u01d7\5\62\32\2\u01d6\u01d4\3\2\2\2\u01d6\u01d5")
        buf.write(u"\3\2\2\2\u01d7\61\3\2\2\2\u01d8\u01d9\7@\2\2\u01d9\u01da")
        buf.write(u"\5\u009eP\2\u01da\u01db\5\64\33\2\u01db\u01dc\7\6\2\2")
        buf.write(u"\u01dc\63\3\2\2\2\u01dd\u01e5\7\'\2\2\u01de\u01e5\7(")
        buf.write(u"\2\2\u01df\u01e5\7%\2\2\u01e0\u01e5\7&\2\2\u01e1\u01e5")
        buf.write(u"\7-\2\2\u01e2\u01e5\7.\2\2\u01e3\u01e5\5\u009cO\2\u01e4")
        buf.write(u"\u01dd\3\2\2\2\u01e4\u01de\3\2\2\2\u01e4\u01df\3\2\2")
        buf.write(u"\2\u01e4\u01e0\3\2\2\2\u01e4\u01e1\3\2\2\2\u01e4\u01e2")
        buf.write(u"\3\2\2\2\u01e4\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write(u"\u01e8\5\u009eP\2\u01e7\u01e4\3\2\2\2\u01e8\u01e9\3\2")
        buf.write(u"\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\65")
        buf.write(u"\3\2\2\2\u01eb\u01ec\7,\2\2\u01ec\u01ed\5\u009eP\2\u01ed")
        buf.write(u"\u01ee\58\35\2\u01ee\u01ef\5\u009eP\2\u01ef\u01f0\7\6")
        buf.write(u"\2\2\u01f0\67\3\2\2\2\u01f1\u01f8\5$\23\2\u01f2\u01f8")
        buf.write(u"\5*\26\2\u01f3\u01f8\7\30\2\2\u01f4\u01f8\5,\27\2\u01f5")
        buf.write(u"\u01f8\5.\30\2\u01f6\u01f8\5\60\31\2\u01f7\u01f1\3\2")
        buf.write(u"\2\2\u01f7\u01f2\3\2\2\2\u01f7\u01f3\3\2\2\2\u01f7\u01f4")
        buf.write(u"\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f6\3\2\2\2\u01f8")
        buf.write(u"9\3\2\2\2\u01f9\u01fa\7\17\2\2\u01fa\u0202\5\u009eP\2")
        buf.write(u"\u01fb\u01fc\7*\2\2\u01fc\u0202\5\u009eP\2\u01fd\u01fe")
        buf.write(u"\7\23\2\2\u01fe\u0202\5\u009eP\2\u01ff\u0200\7\r\2\2")
        buf.write(u"\u0200\u0202\5\u009eP\2\u0201\u01f9\3\2\2\2\u0201\u01fb")
        buf.write(u"\3\2\2\2\u0201\u01fd\3\2\2\2\u0201\u01ff\3\2\2\2\u0202")
        buf.write(u";\3\2\2\2\u0203\u0204\5\u009cO\2\u0204\u0205\5\u009e")
        buf.write(u"P\2\u0205\u020d\3\2\2\2\u0206\u0207\7=\2\2\u0207\u020d")
        buf.write(u"\5\u009eP\2\u0208\u0209\7\t\2\2\u0209\u020d\5\u009cO")
        buf.write(u"\2\u020a\u020b\7\20\2\2\u020b\u020d\5\u009cO\2\u020c")
        buf.write(u"\u0203\3\2\2\2\u020c\u0206\3\2\2\2\u020c\u0208\3\2\2")
        buf.write(u"\2\u020c\u020a\3\2\2\2\u020d=\3\2\2\2\u020e\u020f\5\34")
        buf.write(u"\17\2\u020f\u0210\7\7\2\2\u0210\u0212\5\u009eP\2\u0211")
        buf.write(u"\u0213\5@!\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2")
        buf.write(u"\u0213\u0214\3\2\2\2\u0214\u0215\7\b\2\2\u0215\u0216")
        buf.write(u"\5\u009eP\2\u0216\u0226\3\2\2\2\u0217\u0219\5Z.\2\u0218")
        buf.write(u"\u0217\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2")
        buf.write(u"\2\u021a\u021b\3\2\2\2\u021b\u021d\3\2\2\2\u021c\u021a")
        buf.write(u"\3\2\2\2\u021d\u021e\7\7\2\2\u021e\u0220\5\u009eP\2\u021f")
        buf.write(u"\u0221\5@!\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2\2\2")
        buf.write(u"\u0221\u0222\3\2\2\2\u0222\u0223\7\b\2\2\u0223\u0224")
        buf.write(u"\5\u009eP\2\u0224\u0226\3\2\2\2\u0225\u020e\3\2\2\2\u0225")
        buf.write(u"\u021a\3\2\2\2\u0226?\3\2\2\2\u0227\u0228\7\3\2\2\u0228")
        buf.write(u"\u022a\5\u009eP\2\u0229\u0227\3\2\2\2\u022a\u022d\3\2")
        buf.write(u"\2\2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022e")
        buf.write(u"\3\2\2\2\u022d\u022b\3\2\2\2\u022e\u022f\5B\"\2\u022f")
        buf.write(u"\u0237\5\u009eP\2\u0230\u0231\7\3\2\2\u0231\u0233\5\u009e")
        buf.write(u"P\2\u0232\u0234\5B\"\2\u0233\u0232\3\2\2\2\u0233\u0234")
        buf.write(u"\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0230\3\2\2\2\u0236")
        buf.write(u"\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2")
        buf.write(u"\2\u0238A\3\2\2\2\u0239\u0237\3\2\2\2\u023a\u023b\5<")
        buf.write(u"\37\2\u023b\u023c\7\5\2\2\u023c\u023d\5\u009eP\2\u023d")
        buf.write(u"\u023f\5H%\2\u023e\u0240\5D#\2\u023f\u023e\3\2\2\2\u023f")
        buf.write(u"\u0240\3\2\2\2\u0240\u0247\3\2\2\2\u0241\u0242\5<\37")
        buf.write(u"\2\u0242\u0243\7\5\2\2\u0243\u0244\5\u009eP\2\u0244\u0245")
        buf.write(u"\5F$\2\u0245\u0247\3\2\2\2\u0246\u023a\3\2\2\2\u0246")
        buf.write(u"\u0241\3\2\2\2\u0247C\3\2\2\2\u0248\u0249\7\36\2\2\u0249")
        buf.write(u"\u024a\5\u009eP\2\u024aE\3\2\2\2\u024b\u0251\5Z.\2\u024c")
        buf.write(u"\u0251\5b\62\2\u024d\u024e\5^\60\2\u024e\u024f\5\u009e")
        buf.write(u"P\2\u024f\u0251\3\2\2\2\u0250\u024b\3\2\2\2\u0250\u024c")
        buf.write(u"\3\2\2\2\u0250\u024d\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write(u"\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253G\3\2\2\2\u0254")
        buf.write(u"\u025b\5J&\2\u0255\u0257\5:\36\2\u0256\u0255\3\2\2\2")
        buf.write(u"\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025a")
        buf.write(u"\5J&\2\u0259\u0256\3\2\2\2\u025a\u025d\3\2\2\2\u025b")
        buf.write(u"\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025cI\3\2\2\2\u025d")
        buf.write(u"\u025b\3\2\2\2\u025e\u025f\5R*\2\u025f\u0260\5\u009e")
        buf.write(u"P\2\u0260\u0279\3\2\2\2\u0261\u0262\5T+\2\u0262\u0263")
        buf.write(u"\5\u009eP\2\u0263\u0279\3\2\2\2\u0264\u0265\5V,\2\u0265")
        buf.write(u"\u0266\5\u009eP\2\u0266\u0279\3\2\2\2\u0267\u0268\7.")
        buf.write(u"\2\2\u0268\u0279\5\u009eP\2\u0269\u026a\7!\2\2\u026a")
        buf.write(u"\u0279\5\u009eP\2\u026b\u026c\5\u009cO\2\u026c\u026d")
        buf.write(u"\5\u009eP\2\u026d\u0279\3\2\2\2\u026e\u0279\5x=\2\u026f")
        buf.write(u"\u0270\7 \2\2\u0270\u0279\5\u009eP\2\u0271\u0279\5P)")
        buf.write(u"\2\u0272\u0279\5z>\2\u0273\u0279\5L\'\2\u0274\u0275\5")
        buf.write(u"X-\2\u0275\u0276\5\u009eP\2\u0276\u0279\3\2\2\2\u0277")
        buf.write(u"\u0279\5N(\2\u0278\u025e\3\2\2\2\u0278\u0261\3\2\2\2")
        buf.write(u"\u0278\u0264\3\2\2\2\u0278\u0267\3\2\2\2\u0278\u0269")
        buf.write(u"\3\2\2\2\u0278\u026b\3\2\2\2\u0278\u026e\3\2\2\2\u0278")
        buf.write(u"\u026f\3\2\2\2\u0278\u0271\3\2\2\2\u0278\u0272\3\2\2")
        buf.write(u"\2\u0278\u0273\3\2\2\2\u0278\u0274\3\2\2\2\u0278\u0277")
        buf.write(u"\3\2\2\2\u0279K\3\2\2\2\u027a\u027b\7@\2\2\u027b\u027c")
        buf.write(u"\5\u009eP\2\u027c\u027d\5H%\2\u027d\u027e\7\6\2\2\u027e")
        buf.write(u"\u027f\5\u009eP\2\u027fM\3\2\2\2\u0280\u0281\7<\2\2\u0281")
        buf.write(u"\u0282\5\u009eP\2\u0282\u0283\5H%\2\u0283\u0284\7\6\2")
        buf.write(u"\2\u0284\u0285\5\u009eP\2\u0285O\3\2\2\2\u0286\u0287")
        buf.write(u"\7\30\2\2\u0287\u0288\5\u009eP\2\u0288Q\3\2\2\2\u0289")
        buf.write(u"\u028b\t\6\2\2\u028a\u0289\3\2\2\2\u028a\u028b\3\2\2")
        buf.write(u"\2\u028b\u028c\3\2\2\2\u028c\u028d\7-\2\2\u028dS\3\2")
        buf.write(u"\2\2\u028e\u0290\t\6\2\2\u028f\u028e\3\2\2\2\u028f\u0290")
        buf.write(u"\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\7\37\2\2\u0292")
        buf.write(u"U\3\2\2\2\u0293\u0295\t\6\2\2\u0294\u0293\3\2\2\2\u0294")
        buf.write(u"\u0295\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0297\7%\2\2")
        buf.write(u"\u0297W\3\2\2\2\u0298\u029a\t\6\2\2\u0299\u0298\3\2\2")
        buf.write(u"\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c")
        buf.write(u"\7&\2\2\u029cY\3\2\2\2\u029d\u029e\5\u009cO\2\u029e\u029f")
        buf.write(u"\5\u009eP\2\u029f\u02df\3\2\2\2\u02a0\u02a1\5R*\2\u02a1")
        buf.write(u"\u02a2\5\u009eP\2\u02a2\u02df\3\2\2\2\u02a3\u02a4\5T")
        buf.write(u"+\2\u02a4\u02a5\5\u009eP\2\u02a5\u02df\3\2\2\2\u02a6")
        buf.write(u"\u02a7\5V,\2\u02a7\u02a8\5\u009eP\2\u02a8\u02df\3\2\2")
        buf.write(u"\2\u02a9\u02aa\5X-\2\u02aa\u02ab\5\u009eP\2\u02ab\u02df")
        buf.write(u"\3\2\2\2\u02ac\u02ad\7.\2\2\u02ad\u02df\5\u009eP\2\u02ae")
        buf.write(u"\u02af\7 \2\2\u02af\u02df\5\u009eP\2\u02b0\u02b1\7\30")
        buf.write(u"\2\2\u02b1\u02df\5\u009eP\2\u02b2\u02b3\7!\2\2\u02b3")
        buf.write(u"\u02df\5\u009eP\2\u02b4\u02b5\7\26\2\2\u02b5\u02df\5")
        buf.write(u"\u009eP\2\u02b6\u02b7\7\27\2\2\u02b7\u02df\5\u009eP\2")
        buf.write(u"\u02b8\u02b9\7\5\2\2\u02b9\u02df\5\u009eP\2\u02ba\u02bb")
        buf.write(u"\7@\2\2\u02bb\u02c0\5\u009eP\2\u02bc\u02bf\5Z.\2\u02bd")
        buf.write(u"\u02bf\5`\61\2\u02be\u02bc\3\2\2\2\u02be\u02bd\3\2\2")
        buf.write(u"\2\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1")
        buf.write(u"\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3")
        buf.write(u"\u02c4\7\6\2\2\u02c4\u02c5\5\u009eP\2\u02c5\u02df\3\2")
        buf.write(u"\2\2\u02c6\u02c7\7\4\2\2\u02c7\u02cc\5\u009eP\2\u02c8")
        buf.write(u"\u02cb\5Z.\2\u02c9\u02cb\5`\61\2\u02ca\u02c8\3\2\2\2")
        buf.write(u"\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write(u"\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce")
        buf.write(u"\u02cc\3\2\2\2\u02cf\u02d0\7\6\2\2\u02d0\u02d1\5\u009e")
        buf.write(u"P\2\u02d1\u02df\3\2\2\2\u02d2\u02d3\7\f\2\2\u02d3\u02d8")
        buf.write(u"\5\u009eP\2\u02d4\u02d7\5Z.\2\u02d5\u02d7\5`\61\2\u02d6")
        buf.write(u"\u02d4\3\2\2\2\u02d6\u02d5\3\2\2\2\u02d7\u02da\3\2\2")
        buf.write(u"\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02db")
        buf.write(u"\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\7\16\2\2\u02dc")
        buf.write(u"\u02dd\5\u009eP\2\u02dd\u02df\3\2\2\2\u02de\u029d\3\2")
        buf.write(u"\2\2\u02de\u02a0\3\2\2\2\u02de\u02a3\3\2\2\2\u02de\u02a6")
        buf.write(u"\3\2\2\2\u02de\u02a9\3\2\2\2\u02de\u02ac\3\2\2\2\u02de")
        buf.write(u"\u02ae\3\2\2\2\u02de\u02b0\3\2\2\2\u02de\u02b2\3\2\2")
        buf.write(u"\2\u02de\u02b4\3\2\2\2\u02de\u02b6\3\2\2\2\u02de\u02b8")
        buf.write(u"\3\2\2\2\u02de\u02ba\3\2\2\2\u02de\u02c6\3\2\2\2\u02de")
        buf.write(u"\u02d2\3\2\2\2\u02df[\3\2\2\2\u02e0\u02e1\5^\60\2\u02e1")
        buf.write(u"\u02e5\5\u009eP\2\u02e2\u02e4\5Z.\2\u02e3\u02e2\3\2\2")
        buf.write(u"\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6")
        buf.write(u"\3\2\2\2\u02e6\u02eb\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8")
        buf.write(u"\u02ec\5b\62\2\u02e9\u02ea\7\3\2\2\u02ea\u02ec\5\u009e")
        buf.write(u"P\2\u02eb\u02e8\3\2\2\2\u02eb\u02e9\3\2\2\2\u02ec]\3")
        buf.write(u"\2\2\2\u02ed\u02ee\7\21\2\2\u02ee\u02ef\5\u009cO\2\u02ef")
        buf.write(u"_\3\2\2\2\u02f0\u02fb\5b\62\2\u02f1\u02f2\5^\60\2\u02f2")
        buf.write(u"\u02f3\5\u009eP\2\u02f3\u02fb\3\2\2\2\u02f4\u02f5\7\3")
        buf.write(u"\2\2\u02f5\u02fb\5\u009eP\2\u02f6\u02f7\7\24\2\2\u02f7")
        buf.write(u"\u02fb\5\u009eP\2\u02f8\u02f9\7\25\2\2\u02f9\u02fb\5")
        buf.write(u"\u009eP\2\u02fa\u02f0\3\2\2\2\u02fa\u02f1\3\2\2\2\u02fa")
        buf.write(u"\u02f4\3\2\2\2\u02fa\u02f6\3\2\2\2\u02fa\u02f8\3\2\2")
        buf.write(u"\2\u02fba\3\2\2\2\u02fc\u02fd\7\7\2\2\u02fd\u0309\5\u009e")
        buf.write(u"P\2\u02fe\u0308\5@!\2\u02ff\u0308\5d\63\2\u0300\u0308")
        buf.write(u"\5Z.\2\u0301\u0308\5b\62\2\u0302\u0303\5^\60\2\u0303")
        buf.write(u"\u0304\5\u009eP\2\u0304\u0308\3\2\2\2\u0305\u0306\7\3")
        buf.write(u"\2\2\u0306\u0308\5\u009eP\2\u0307\u02fe\3\2\2\2\u0307")
        buf.write(u"\u02ff\3\2\2\2\u0307\u0300\3\2\2\2\u0307\u0301\3\2\2")
        buf.write(u"\2\u0307\u0302\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u030b")
        buf.write(u"\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a")
        buf.write(u"\u030c\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u030d\7\b\2")
        buf.write(u"\2\u030d\u030e\5\u009eP\2\u030ec\3\2\2\2\u030f\u031a")
        buf.write(u"\5> \2\u0310\u031a\5\f\7\2\u0311\u031a\5\30\r\2\u0312")
        buf.write(u"\u031a\5\u0082B\2\u0313\u031a\5\u0086D\2\u0314\u031a")
        buf.write(u"\5h\65\2\u0315\u031a\5\u008cG\2\u0316\u031a\5\u008eH")
        buf.write(u"\2\u0317\u031a\5\u0090I\2\u0318\u031a\5\\/\2\u0319\u030f")
        buf.write(u"\3\2\2\2\u0319\u0310\3\2\2\2\u0319\u0311\3\2\2\2\u0319")
        buf.write(u"\u0312\3\2\2\2\u0319\u0313\3\2\2\2\u0319\u0314\3\2\2")
        buf.write(u"\2\u0319\u0315\3\2\2\2\u0319\u0316\3\2\2\2\u0319\u0317")
        buf.write(u"\3\2\2\2\u0319\u0318\3\2\2\2\u031ae\3\2\2\2\u031b\u031c")
        buf.write(u"\7\7\2\2\u031c\u0320\5\u009eP\2\u031d\u031f\5d\63\2\u031e")
        buf.write(u"\u031d\3\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2")
        buf.write(u"\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2\u0322\u0320")
        buf.write(u"\3\2\2\2\u0323\u0324\7\b\2\2\u0324\u0325\5\u009eP\2\u0325")
        buf.write(u"g\3\2\2\2\u0326\u0327\7\63\2\2\u0327\u0328\5\u009eP\2")
        buf.write(u"\u0328\u0329\5j\66\2\u0329\u032a\5\u009eP\2\u032a\u032b")
        buf.write(u"\5f\64\2\u032bi\3\2\2\2\u032c\u0331\5n8\2\u032d\u0331")
        buf.write(u"\5p9\2\u032e\u0331\5r:\2\u032f\u0331\5l\67\2\u0330\u032c")
        buf.write(u"\3\2\2\2\u0330\u032d\3\2\2\2\u0330\u032e\3\2\2\2\u0330")
        buf.write(u"\u032f\3\2\2\2\u0331k\3\2\2\2\u0332\u0333\7\4\2\2\u0333")
        buf.write(u"\u0334\5\u009eP\2\u0334\u0335\5j\66\2\u0335\u0336\5\u009e")
        buf.write(u"P\2\u0336\u0337\7\6\2\2\u0337\u033b\3\2\2\2\u0338\u033b")
        buf.write(u"\5t;\2\u0339\u033b\5v<\2\u033a\u0332\3\2\2\2\u033a\u0338")
        buf.write(u"\3\2\2\2\u033a\u0339\3\2\2\2\u033bm\3\2\2\2\u033c\u033d")
        buf.write(u"\7#\2\2\u033d\u033e\5\u009eP\2\u033e\u033f\7\23\2\2\u033f")
        buf.write(u"\u0340\5\u009eP\2\u0340\u0341\5l\67\2\u0341o\3\2\2\2")
        buf.write(u"\u0342\u034c\5l\67\2\u0343\u0344\5\u009eP\2\u0344\u0345")
        buf.write(u"\7\23\2\2\u0345\u0346\5\u009eP\2\u0346\u0347\7$\2\2\u0347")
        buf.write(u"\u0348\5\u009eP\2\u0348\u0349\7\23\2\2\u0349\u034a\5")
        buf.write(u"\u009eP\2\u034a\u034b\5l\67\2\u034b\u034d\3\2\2\2\u034c")
        buf.write(u"\u0343\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034c\3\2\2")
        buf.write(u"\2\u034e\u034f\3\2\2\2\u034fq\3\2\2\2\u0350\u035a\5l")
        buf.write(u"\67\2\u0351\u0352\5\u009eP\2\u0352\u0353\7\23\2\2\u0353")
        buf.write(u"\u0354\5\u009eP\2\u0354\u0355\7\64\2\2\u0355\u0356\5")
        buf.write(u"\u009eP\2\u0356\u0357\7\23\2\2\u0357\u0358\5\u009eP\2")
        buf.write(u"\u0358\u0359\5l\67\2\u0359\u035b\3\2\2\2\u035a\u0351")
        buf.write(u"\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035a\3\2\2\2\u035c")
        buf.write(u"\u035d\3\2\2\2\u035ds\3\2\2\2\u035e\u035f\7\4\2\2\u035f")
        buf.write(u"\u0360\5\u009eP\2\u0360\u0361\5B\"\2\u0361\u0362\7\6")
        buf.write(u"\2\2\u0362u\3\2\2\2\u0363\u0368\t\7\2\2\u0364\u0367\5")
        buf.write(u"Z.\2\u0365\u0367\5`\61\2\u0366\u0364\3\2\2\2\u0366\u0365")
        buf.write(u"\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368")
        buf.write(u"\u0369\3\2\2\2\u0369\u036b\3\2\2\2\u036a\u0368\3\2\2")
        buf.write(u"\2\u036b\u036c\7\6\2\2\u036cw\3\2\2\2\u036d\u036e\7>")
        buf.write(u"\2\2\u036e\u036f\5\u009eP\2\u036f\u0370\7=\2\2\u0370")
        buf.write(u"\u0371\5\u009eP\2\u0371\u0372\7\6\2\2\u0372\u0373\5\u009e")
        buf.write(u"P\2\u0373y\3\2\2\2\u0374\u0375\78\2\2\u0375\u0376\5\u009e")
        buf.write(u"P\2\u0376\u0377\5|?\2\u0377\u0378\7\6\2\2\u0378\u0379")
        buf.write(u"\5\u009eP\2\u0379{\3\2\2\2\u037a\u0385\5~@\2\u037b\u037c")
        buf.write(u"\7\23\2\2\u037c\u037d\5\u009eP\2\u037d\u037e\t\6\2\2")
        buf.write(u"\u037e\u037f\5\u009eP\2\u037f\u0380\7\23\2\2\u0380\u0381")
        buf.write(u"\5\u009eP\2\u0381\u0382\5~@\2\u0382\u0384\3\2\2\2\u0383")
        buf.write(u"\u037b\3\2\2\2\u0384\u0387\3\2\2\2\u0385\u0383\3\2\2")
        buf.write(u"\2\u0385\u0386\3\2\2\2\u0386}\3\2\2\2\u0387\u0385\3\2")
        buf.write(u"\2\2\u0388\u0394\5\u0080A\2\u0389\u038a\7\t\2\2\u038a")
        buf.write(u"\u038b\5\u009eP\2\u038b\u038c\5\u0080A\2\u038c\u0393")
        buf.write(u"\3\2\2\2\u038d\u038e\7\17\2\2\u038e\u038f\5\u009eP\2")
        buf.write(u"\u038f\u0390\5R*\2\u0390\u0391\5\u009eP\2\u0391\u0393")
        buf.write(u"\3\2\2\2\u0392\u0389\3\2\2\2\u0392\u038d\3\2\2\2\u0393")
        buf.write(u"\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2")
        buf.write(u"\2\u0395\177\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u0398")
        buf.write(u"\5R*\2\u0398\u0399\5\u009eP\2\u0399\u03aa\3\2\2\2\u039a")
        buf.write(u"\u039b\5V,\2\u039b\u039c\5\u009eP\2\u039c\u03aa\3\2\2")
        buf.write(u"\2\u039d\u039e\5X-\2\u039e\u039f\5\u009eP\2\u039f\u03aa")
        buf.write(u"\3\2\2\2\u03a0\u03a1\5T+\2\u03a1\u03a2\5\u009eP\2\u03a2")
        buf.write(u"\u03aa\3\2\2\2\u03a3\u03a4\7\4\2\2\u03a4\u03a5\5\u009e")
        buf.write(u"P\2\u03a5\u03a6\5|?\2\u03a6\u03a7\7\6\2\2\u03a7\u03a8")
        buf.write(u"\5\u009eP\2\u03a8\u03aa\3\2\2\2\u03a9\u0397\3\2\2\2\u03a9")
        buf.write(u"\u039a\3\2\2\2\u03a9\u039d\3\2\2\2\u03a9\u03a0\3\2\2")
        buf.write(u"\2\u03a9\u03a3\3\2\2\2\u03aa\u0081\3\2\2\2\u03ab\u03ac")
        buf.write(u"\7\62\2\2\u03ac\u03ad\5\u009eP\2\u03ad\u03ae\7\7\2\2")
        buf.write(u"\u03ae\u03b0\5\u009eP\2\u03af\u03b1\5\u0084C\2\u03b0")
        buf.write(u"\u03af\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b9\3\2\2")
        buf.write(u"\2\u03b2\u03b3\7\3\2\2\u03b3\u03b5\5\u009eP\2\u03b4\u03b6")
        buf.write(u"\5\u0084C\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6")
        buf.write(u"\u03b8\3\2\2\2\u03b7\u03b2\3\2\2\2\u03b8\u03bb\3\2\2")
        buf.write(u"\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bc")
        buf.write(u"\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc\u03bd\7\b\2\2\u03bd")
        buf.write(u"\u03be\5\u009eP\2\u03be\u0083\3\2\2\2\u03bf\u03c0\5<")
        buf.write(u"\37\2\u03c0\u03c1\7\5\2\2\u03c1\u03c2\5\u009eP\2\u03c2")
        buf.write(u"\u03c3\5H%\2\u03c3\u03ca\3\2\2\2\u03c4\u03c5\5<\37\2")
        buf.write(u"\u03c5\u03c6\7\5\2\2\u03c6\u03c7\5\u009eP\2\u03c7\u03c8")
        buf.write(u"\5F$\2\u03c8\u03ca\3\2\2\2\u03c9\u03bf\3\2\2\2\u03c9")
        buf.write(u"\u03c4\3\2\2\2\u03ca\u0085\3\2\2\2\u03cb\u03cc\7\65\2")
        buf.write(u"\2\u03cc\u03cd\5\u009eP\2\u03cd\u03ce\7\23\2\2\u03ce")
        buf.write(u"\u03cf\5\u009eP\2\u03cf\u03d0\5\u009cO\2\u03d0\u03d1")
        buf.write(u"\5\u009eP\2\u03d1\u03d2\7\7\2\2\u03d2\u03d3\5\u009eP")
        buf.write(u"\2\u03d3\u03d4\5\u0088E\2\u03d4\u03d5\7\b\2\2\u03d5\u03d6")
        buf.write(u"\5\u009eP\2\u03d6\u0087\3\2\2\2\u03d7\u03d8\5\u008aF")
        buf.write(u"\2\u03d8\u03d9\7\7\2\2\u03d9\u03db\5\u009eP\2\u03da\u03dc")
        buf.write(u"\5@!\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc")
        buf.write(u"\u03dd\3\2\2\2\u03dd\u03de\7\b\2\2\u03de\u03df\5\u009e")
        buf.write(u"P\2\u03df\u03e1\3\2\2\2\u03e0\u03d7\3\2\2\2\u03e1\u03e4")
        buf.write(u"\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write(u"\u0089\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\u03e6\t\b\2")
        buf.write(u"\2\u03e6\u03ee\5\u009eP\2\u03e7\u03e8\7*\2\2\u03e8\u03e9")
        buf.write(u"\5\u009eP\2\u03e9\u03ea\t\b\2\2\u03ea\u03eb\5\u009eP")
        buf.write(u"\2\u03eb\u03ed\3\2\2\2\u03ec\u03e7\3\2\2\2\u03ed\u03f0")
        buf.write(u"\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write(u"\u008b\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1\u03f2\79\2\2")
        buf.write(u"\u03f2\u03f3\5\u009eP\2\u03f3\u03f4\7\7\2\2\u03f4\u03f6")
        buf.write(u"\5\u009eP\2\u03f5\u03f7\5@!\2\u03f6\u03f5\3\2\2\2\u03f6")
        buf.write(u"\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\7\b\2")
        buf.write(u"\2\u03f9\u03fa\5\u009eP\2\u03fa\u008d\3\2\2\2\u03fb\u03fc")
        buf.write(u"\7:\2\2\u03fc\u03fd\5\u009eP\2\u03fd\u03fe\5\u009cO\2")
        buf.write(u"\u03fe\u03ff\5\u009eP\2\u03ff\u0400\7\7\2\2\u0400\u0402")
        buf.write(u"\5\u009eP\2\u0401\u0403\5@!\2\u0402\u0401\3\2\2\2\u0402")
        buf.write(u"\u0403\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0405\7\b\2")
        buf.write(u"\2\u0405\u0406\5\u009eP\2\u0406\u008f\3\2\2\2\u0407\u0408")
        buf.write(u"\7;\2\2\u0408\u0409\5\u009eP\2\u0409\u040a\5\u0092J\2")
        buf.write(u"\u040a\u040b\5\u009eP\2\u040b\u040c\7\7\2\2\u040c\u0410")
        buf.write(u"\5\u009eP\2\u040d\u040f\5\u0096L\2\u040e\u040d\3\2\2")
        buf.write(u"\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410\u0411")
        buf.write(u"\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2\u0413")
        buf.write(u"\u0414\7\b\2\2\u0414\u0415\5\u009eP\2\u0415\u0091\3\2")
        buf.write(u"\2\2\u0416\u041e\5\u0094K\2\u0417\u0418\5\u009eP\2\u0418")
        buf.write(u"\u0419\7*\2\2\u0419\u041a\5\u009eP\2\u041a\u041b\5\u0094")
        buf.write(u"K\2\u041b\u041d\3\2\2\2\u041c\u0417\3\2\2\2\u041d\u0420")
        buf.write(u"\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f")
        buf.write(u"\u0093\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u042c\7.\2\2")
        buf.write(u"\u0422\u0428\5\u009cO\2\u0423\u0424\5\u009eP\2\u0424")
        buf.write(u"\u0425\5\u009cO\2\u0425\u0427\3\2\2\2\u0426\u0423\3\2")
        buf.write(u"\2\2\u0427\u042a\3\2\2\2\u0428\u0426\3\2\2\2\u0428\u0429")
        buf.write(u"\3\2\2\2\u0429\u042c\3\2\2\2\u042a\u0428\3\2\2\2\u042b")
        buf.write(u"\u0421\3\2\2\2\u042b\u0422\3\2\2\2\u042c\u0095\3\2\2")
        buf.write(u"\2\u042d\u042e\5\u0098M\2\u042e\u042f\5\u009eP\2\u042f")
        buf.write(u"\u0430\7\7\2\2\u0430\u0432\5\u009eP\2\u0431\u0433\5\u009a")
        buf.write(u"N\2\u0432\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u043c")
        buf.write(u"\3\2\2\2\u0434\u0435\5\u009eP\2\u0435\u0436\7\3\2\2\u0436")
        buf.write(u"\u0438\5\u009eP\2\u0437\u0439\5\u009aN\2\u0438\u0437")
        buf.write(u"\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\3\2\2\2\u043a")
        buf.write(u"\u0434\3\2\2\2\u043b\u043e\3\2\2\2\u043c\u043a\3\2\2")
        buf.write(u"\2\u043c\u043d\3\2\2\2\u043d\u043f\3\2\2\2\u043e\u043c")
        buf.write(u"\3\2\2\2\u043f\u0440\7\b\2\2\u0440\u0441\5\u009eP\2\u0441")
        buf.write(u"\u0097\3\2\2\2\u0442\u0443\5^\60\2\u0443\u0099\3\2\2")
        buf.write(u"\2\u0444\u0445\5\u009cO\2\u0445\u0446\5\u009eP\2\u0446")
        buf.write(u"\u0447\7\5\2\2\u0447\u0448\5\u009eP\2\u0448\u044e\5R")
        buf.write(u"*\2\u0449\u044a\5\u009eP\2\u044a\u044b\5R*\2\u044b\u044d")
        buf.write(u"\3\2\2\2\u044c\u0449\3\2\2\2\u044d\u0450\3\2\2\2\u044e")
        buf.write(u"\u044c\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u009b\3\2\2")
        buf.write(u"\2\u0450\u044e\3\2\2\2\u0451\u0452\t\t\2\2\u0452\u009d")
        buf.write(u"\3\2\2\2\u0453\u0455\t\n\2\2\u0454\u0453\3\2\2\2\u0455")
        buf.write(u"\u0458\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2")
        buf.write(u"\2\u0457\u009f\3\2\2\2\u0458\u0456\3\2\2\2l\u00a5\u00aa")
        buf.write(u"\u00b1\u00b6\u00bd\u00c2\u00c9\u00ce\u00dd\u00f9\u0100")
        buf.write(u"\u010c\u0111\u0122\u0125\u012a\u0135\u013f\u0142\u014d")
        buf.write(u"\u0158\u015d\u0162\u0166\u0177\u0182\u018d\u0191\u0198")
        buf.write(u"\u019a\u01a2\u01a4\u01a6\u01a9\u01af\u01b6\u01c0\u01c8")
        buf.write(u"\u01cc\u01d2\u01d6\u01e4\u01e9\u01f7\u0201\u020c\u0212")
        buf.write(u"\u021a\u0220\u0225\u022b\u0233\u0237\u023f\u0246\u0250")
        buf.write(u"\u0252\u0256\u025b\u0278\u028a\u028f\u0294\u0299\u02be")
        buf.write(u"\u02c0\u02ca\u02cc\u02d6\u02d8\u02de\u02e5\u02eb\u02fa")
        buf.write(u"\u0307\u0309\u0319\u0320\u0330\u033a\u034e\u035c\u0366")
        buf.write(u"\u0368\u0385\u0392\u0394\u03a9\u03b0\u03b5\u03b9\u03c9")
        buf.write(u"\u03db\u03e2\u03ee\u03f6\u0402\u0410\u041e\u0428\u042b")
        buf.write(u"\u0432\u0438\u043c\u044e\u0456")
        return buf.getvalue()


class css3Parser ( Parser ):

    grammarFileName = "css3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'('", u"':'", u"')'", u"'{'", 
                     u"'}'", u"'*'", u"'|'", u"'.'", u"'['", u"'='", u"']'", 
                     u"'/'", u"'_'", u"'@'", u"<INVALID>", u"<INVALID>", 
                     u"'<!--'", u"'-->'", u"'~='", u"'|='", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'@charset '", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'+'", u"'-'", u"'>'", 
                     u"','", u"'~'", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'^='", u"'$='", u"'*='", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'calc('", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'var('" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"Comment", u"Space", u"Cdo", u"Cdc", u"Includes", 
                      u"DashMatch", u"Hash", u"Import", u"Page", u"Media", 
                      u"Namespace", u"Charset", u"Important", u"Percentage", 
                      u"Uri", u"UnicodeRange", u"MediaOnly", u"Not", u"And", 
                      u"Dimension", u"UnknownDimension", u"Plus", u"Minus", 
                      u"Greater", u"Comma", u"Tilde", u"PseudoNot", u"Number", 
                      u"String", u"PrefixMatch", u"SuffixMatch", u"SubstringMatch", 
                      u"FontFace", u"Supports", u"Or", u"Keyframes", u"From", 
                      u"To", u"Calc", u"Viewport", u"CounterStyle", u"FontFeatureValues", 
                      u"DxImageTransform", u"Variable", u"Var", u"Ident", 
                      u"Function" ]

    RULE_stylesheet = 0
    RULE_charset = 1
    RULE_imports = 2
    RULE_namespace = 3
    RULE_namespacePrefix = 4
    RULE_media = 5
    RULE_mediaQueryList = 6
    RULE_mediaQuery = 7
    RULE_mediaType = 8
    RULE_mediaExpression = 9
    RULE_mediaFeature = 10
    RULE_page = 11
    RULE_pseudoPage = 12
    RULE_selectorGroup = 13
    RULE_selector = 14
    RULE_combinator = 15
    RULE_simpleSelectorSequence = 16
    RULE_typeSelector = 17
    RULE_typeNamespacePrefix = 18
    RULE_elementName = 19
    RULE_universal = 20
    RULE_className = 21
    RULE_attrib = 22
    RULE_pseudo = 23
    RULE_functionalPseudo = 24
    RULE_expression = 25
    RULE_negation = 26
    RULE_negationArg = 27
    RULE_operator = 28
    RULE_property = 29
    RULE_ruleset = 30
    RULE_declarationList = 31
    RULE_declaration = 32
    RULE_prio = 33
    RULE_value = 34
    RULE_expr = 35
    RULE_term = 36
    RULE_function = 37
    RULE_dxImageTransform = 38
    RULE_hexcolor = 39
    RULE_number = 40
    RULE_percentage = 41
    RULE_dimension = 42
    RULE_unknownDimension = 43
    RULE_any = 44
    RULE_atRule = 45
    RULE_atKeyword = 46
    RULE_unused = 47
    RULE_block = 48
    RULE_nestedStatement = 49
    RULE_groupRuleBody = 50
    RULE_supportsRule = 51
    RULE_supportsCondition = 52
    RULE_supportsConditionInParens = 53
    RULE_supportsNegation = 54
    RULE_supportsConjunction = 55
    RULE_supportsDisjunction = 56
    RULE_supportsDeclarationCondition = 57
    RULE_generalEnclosed = 58
    RULE_var = 59
    RULE_calc = 60
    RULE_calcSum = 61
    RULE_calcProduct = 62
    RULE_calcValue = 63
    RULE_fontFaceRule = 64
    RULE_fontFaceDeclaration = 65
    RULE_keyframesRule = 66
    RULE_keyframesBlocks = 67
    RULE_keyframeSelector = 68
    RULE_viewport = 69
    RULE_counterStyle = 70
    RULE_fontFeatureValuesRule = 71
    RULE_fontFamilyNameList = 72
    RULE_fontFamilyName = 73
    RULE_featureValueBlock = 74
    RULE_featureType = 75
    RULE_featureValueDefinition = 76
    RULE_ident = 77
    RULE_ws = 78

    ruleNames =  [ u"stylesheet", u"charset", u"imports", u"namespace", 
                   u"namespacePrefix", u"media", u"mediaQueryList", u"mediaQuery", 
                   u"mediaType", u"mediaExpression", u"mediaFeature", u"page", 
                   u"pseudoPage", u"selectorGroup", u"selector", u"combinator", 
                   u"simpleSelectorSequence", u"typeSelector", u"typeNamespacePrefix", 
                   u"elementName", u"universal", u"className", u"attrib", 
                   u"pseudo", u"functionalPseudo", u"expression", u"negation", 
                   u"negationArg", u"operator", u"property", u"ruleset", 
                   u"declarationList", u"declaration", u"prio", u"value", 
                   u"expr", u"term", u"function", u"dxImageTransform", u"hexcolor", 
                   u"number", u"percentage", u"dimension", u"unknownDimension", 
                   u"any", u"atRule", u"atKeyword", u"unused", u"block", 
                   u"nestedStatement", u"groupRuleBody", u"supportsRule", 
                   u"supportsCondition", u"supportsConditionInParens", u"supportsNegation", 
                   u"supportsConjunction", u"supportsDisjunction", u"supportsDeclarationCondition", 
                   u"generalEnclosed", u"var", u"calc", u"calcSum", u"calcProduct", 
                   u"calcValue", u"fontFaceRule", u"fontFaceDeclaration", 
                   u"keyframesRule", u"keyframesBlocks", u"keyframeSelector", 
                   u"viewport", u"counterStyle", u"fontFeatureValuesRule", 
                   u"fontFamilyNameList", u"fontFamilyName", u"featureValueBlock", 
                   u"featureType", u"featureValueDefinition", u"ident", 
                   u"ws" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    Comment=16
    Space=17
    Cdo=18
    Cdc=19
    Includes=20
    DashMatch=21
    Hash=22
    Import=23
    Page=24
    Media=25
    Namespace=26
    Charset=27
    Important=28
    Percentage=29
    Uri=30
    UnicodeRange=31
    MediaOnly=32
    Not=33
    And=34
    Dimension=35
    UnknownDimension=36
    Plus=37
    Minus=38
    Greater=39
    Comma=40
    Tilde=41
    PseudoNot=42
    Number=43
    String=44
    PrefixMatch=45
    SuffixMatch=46
    SubstringMatch=47
    FontFace=48
    Supports=49
    Or=50
    Keyframes=51
    From=52
    To=53
    Calc=54
    Viewport=55
    CounterStyle=56
    FontFeatureValues=57
    DxImageTransform=58
    Variable=59
    Var=60
    Ident=61
    Function=62

    def __init__(self, input, output=sys.stdout):
        super(css3Parser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StylesheetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.StylesheetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def charset(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.CharsetContext)
            else:
                return self.getTypedRuleContext(css3Parser.CharsetContext,i)


        def imports(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.ImportsContext)
            else:
                return self.getTypedRuleContext(css3Parser.ImportsContext,i)


        def namespace(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NamespaceContext)
            else:
                return self.getTypedRuleContext(css3Parser.NamespaceContext,i)


        def nestedStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NestedStatementContext)
            else:
                return self.getTypedRuleContext(css3Parser.NestedStatementContext,i)


        def Comment(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comment)
            else:
                return self.getToken(css3Parser.Comment, i)

        def Space(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Space)
            else:
                return self.getToken(css3Parser.Space, i)

        def Cdo(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Cdo)
            else:
                return self.getToken(css3Parser.Cdo, i)

        def Cdc(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Cdc)
            else:
                return self.getToken(css3Parser.Cdc, i)

        def getRuleIndex(self):
            return css3Parser.RULE_stylesheet

        def enterRule(self, listener):
            if hasattr(listener, "enterStylesheet"):
                listener.enterStylesheet(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStylesheet"):
                listener.exitStylesheet(self)




    def stylesheet(self):

        localctx = css3Parser.StylesheetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stylesheet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self.ws()
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Charset:
                self.state = 159
                self.charset()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0):
                    self.state = 160
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Import:
                self.state = 171
                self.imports()
                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0):
                    self.state = 172
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Namespace:
                self.state = 183
                self.namespace()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0):
                    self.state = 184
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.PseudoNot) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.FontFace) | (1 << css3Parser.Supports) | (1 << css3Parser.Or) | (1 << css3Parser.Keyframes) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Viewport) | (1 << css3Parser.CounterStyle) | (1 << css3Parser.FontFeatureValues) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                self.state = 195
                self.nestedStatement()
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0):
                    self.state = 196
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CharsetContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_charset

     
        def copyFrom(self, ctx):
            super(css3Parser.CharsetContext, self).copyFrom(ctx)



    class BadCharsetContext(CharsetContext):

        def __init__(self, parser, ctx): # actually a css3Parser.CharsetContext)
            super(css3Parser.BadCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Charset(self):
            return self.getToken(css3Parser.Charset, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def String(self):
            return self.getToken(css3Parser.String, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterBadCharset"):
                listener.enterBadCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadCharset"):
                listener.exitBadCharset(self)


    class GoodCharsetContext(CharsetContext):

        def __init__(self, parser, ctx): # actually a css3Parser.CharsetContext)
            super(css3Parser.GoodCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Charset(self):
            return self.getToken(css3Parser.Charset, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def String(self):
            return self.getToken(css3Parser.String, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGoodCharset"):
                listener.enterGoodCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoodCharset"):
                listener.exitGoodCharset(self)



    def charset(self):

        localctx = css3Parser.CharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_charset)
        try:
            self.state = 219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                localctx = css3Parser.GoodCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 207
                self.match(css3Parser.Charset)
                self.state = 208
                self.ws()
                self.state = 209
                self.match(css3Parser.String)
                self.state = 210
                self.ws()
                self.state = 211
                self.match(css3Parser.T__0)
                self.state = 212
                self.ws()
                pass

            elif la_ == 2:
                localctx = css3Parser.BadCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(css3Parser.Charset)
                self.state = 215
                self.ws()
                self.state = 216
                self.match(css3Parser.String)
                self.state = 217
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ImportsContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_imports

     
        def copyFrom(self, ctx):
            super(css3Parser.ImportsContext, self).copyFrom(ctx)



    class BadImportContext(ImportsContext):

        def __init__(self, parser, ctx): # actually a css3Parser.ImportsContext)
            super(css3Parser.BadImportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(css3Parser.Import, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def mediaQueryList(self):
            return self.getTypedRuleContext(css3Parser.MediaQueryListContext,0)

        def String(self):
            return self.getToken(css3Parser.String, 0)
        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterBadImport"):
                listener.enterBadImport(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadImport"):
                listener.exitBadImport(self)


    class GoodImportContext(ImportsContext):

        def __init__(self, parser, ctx): # actually a css3Parser.ImportsContext)
            super(css3Parser.GoodImportContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(css3Parser.Import, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def mediaQueryList(self):
            return self.getTypedRuleContext(css3Parser.MediaQueryListContext,0)

        def String(self):
            return self.getToken(css3Parser.String, 0)
        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGoodImport"):
                listener.enterGoodImport(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoodImport"):
                listener.exitGoodImport(self)



    def imports(self):

        localctx = css3Parser.ImportsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_imports)
        self._la = 0 # Token type
        try:
            self.state = 247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                localctx = css3Parser.GoodImportContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.match(css3Parser.Import)
                self.state = 222
                self.ws()
                self.state = 223
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 224
                self.ws()
                self.state = 225
                self.mediaQueryList()
                self.state = 226
                self.match(css3Parser.T__0)
                self.state = 227
                self.ws()
                pass

            elif la_ == 2:
                localctx = css3Parser.GoodImportContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.match(css3Parser.Import)
                self.state = 230
                self.ws()
                self.state = 231
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 232
                self.ws()
                self.state = 233
                self.match(css3Parser.T__0)
                self.state = 234
                self.ws()
                pass

            elif la_ == 3:
                localctx = css3Parser.BadImportContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                self.match(css3Parser.Import)
                self.state = 237
                self.ws()
                self.state = 238
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 239
                self.ws()
                self.state = 240
                self.mediaQueryList()
                pass

            elif la_ == 4:
                localctx = css3Parser.BadImportContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 242
                self.match(css3Parser.Import)
                self.state = 243
                self.ws()
                self.state = 244
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 245
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NamespaceContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_namespace

     
        def copyFrom(self, ctx):
            super(css3Parser.NamespaceContext, self).copyFrom(ctx)



    class GoodNamespaceContext(NamespaceContext):

        def __init__(self, parser, ctx): # actually a css3Parser.NamespaceContext)
            super(css3Parser.GoodNamespaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Namespace(self):
            return self.getToken(css3Parser.Namespace, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def String(self):
            return self.getToken(css3Parser.String, 0)
        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)
        def namespacePrefix(self):
            return self.getTypedRuleContext(css3Parser.NamespacePrefixContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterGoodNamespace"):
                listener.enterGoodNamespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoodNamespace"):
                listener.exitGoodNamespace(self)


    class BadNamespaceContext(NamespaceContext):

        def __init__(self, parser, ctx): # actually a css3Parser.NamespaceContext)
            super(css3Parser.BadNamespaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def Namespace(self):
            return self.getToken(css3Parser.Namespace, 0)
        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def String(self):
            return self.getToken(css3Parser.String, 0)
        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)
        def namespacePrefix(self):
            return self.getTypedRuleContext(css3Parser.NamespacePrefixContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterBadNamespace"):
                listener.enterBadNamespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadNamespace"):
                listener.exitBadNamespace(self)



    def namespace(self):

        localctx = css3Parser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                localctx = css3Parser.GoodNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.match(css3Parser.Namespace)
                self.state = 250
                self.ws()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0):
                    self.state = 251
                    self.namespacePrefix()
                    self.state = 252
                    self.ws()


                self.state = 256
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 257
                self.ws()
                self.state = 258
                self.match(css3Parser.T__0)
                self.state = 259
                self.ws()
                pass

            elif la_ == 2:
                localctx = css3Parser.BadNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.match(css3Parser.Namespace)
                self.state = 262
                self.ws()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0):
                    self.state = 263
                    self.namespacePrefix()
                    self.state = 264
                    self.ws()


                self.state = 268
                _la = self._input.LA(1)
                if not(_la==css3Parser.Uri or _la==css3Parser.String):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 269
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacePrefixContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NamespacePrefixContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_namespacePrefix

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespacePrefix"):
                listener.enterNamespacePrefix(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespacePrefix"):
                listener.exitNamespacePrefix(self)




    def namespacePrefix(self):

        localctx = css3Parser.NamespacePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_namespacePrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Media(self):
            return self.getToken(css3Parser.Media, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def mediaQueryList(self):
            return self.getTypedRuleContext(css3Parser.MediaQueryListContext,0)


        def groupRuleBody(self):
            return self.getTypedRuleContext(css3Parser.GroupRuleBodyContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_media

        def enterRule(self, listener):
            if hasattr(listener, "enterMedia"):
                listener.enterMedia(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMedia"):
                listener.exitMedia(self)




    def media(self):

        localctx = css3Parser.MediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_media)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(css3Parser.Media)
            self.state = 276
            self.ws()
            self.state = 277
            self.mediaQueryList()
            self.state = 278
            self.groupRuleBody()
            self.state = 279
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaQueryListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaQueryListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def mediaQuery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.MediaQueryContext)
            else:
                return self.getTypedRuleContext(css3Parser.MediaQueryContext,i)


        def Comma(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comma)
            else:
                return self.getToken(css3Parser.Comma, i)

        def getRuleIndex(self):
            return css3Parser.RULE_mediaQueryList

        def enterRule(self, listener):
            if hasattr(listener, "enterMediaQueryList"):
                listener.enterMediaQueryList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMediaQueryList"):
                listener.exitMediaQueryList(self)




    def mediaQueryList(self):

        localctx = css3Parser.MediaQueryListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_mediaQueryList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 281
                self.mediaQuery()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==css3Parser.Comma:
                    self.state = 282
                    self.match(css3Parser.Comma)
                    self.state = 283
                    self.ws()
                    self.state = 284
                    self.mediaQuery()
                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 293
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaQueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaQueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def mediaType(self):
            return self.getTypedRuleContext(css3Parser.MediaTypeContext,0)


        def And(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.And)
            else:
                return self.getToken(css3Parser.And, i)

        def mediaExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.MediaExpressionContext)
            else:
                return self.getTypedRuleContext(css3Parser.MediaExpressionContext,i)


        def MediaOnly(self):
            return self.getToken(css3Parser.MediaOnly, 0)

        def Not(self):
            return self.getToken(css3Parser.Not, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_mediaQuery

        def enterRule(self, listener):
            if hasattr(listener, "enterMediaQuery"):
                listener.enterMediaQuery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMediaQuery"):
                listener.exitMediaQuery(self)




    def mediaQuery(self):

        localctx = css3Parser.MediaQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_mediaQuery)
        self._la = 0 # Token type
        try:
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.Comment, css3Parser.Space, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 295
                    _la = self._input.LA(1)
                    if not(_la==css3Parser.MediaOnly or _la==css3Parser.Not):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 298
                self.ws()
                self.state = 299
                self.mediaType()
                self.state = 300
                self.ws()
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 301
                        self.match(css3Parser.And)
                        self.state = 302
                        self.ws()
                        self.state = 303
                        self.mediaExpression() 
                    self.state = 309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass
            elif token in [css3Parser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.mediaExpression()
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 311
                        self.match(css3Parser.And)
                        self.state = 312
                        self.ws()
                        self.state = 313
                        self.mediaExpression() 
                    self.state = 319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_mediaType

        def enterRule(self, listener):
            if hasattr(listener, "enterMediaType"):
                listener.enterMediaType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMediaType"):
                listener.exitMediaType(self)




    def mediaType(self):

        localctx = css3Parser.MediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_mediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def mediaFeature(self):
            return self.getTypedRuleContext(css3Parser.MediaFeatureContext,0)


        def expr(self):
            return self.getTypedRuleContext(css3Parser.ExprContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_mediaExpression

        def enterRule(self, listener):
            if hasattr(listener, "enterMediaExpression"):
                listener.enterMediaExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMediaExpression"):
                listener.exitMediaExpression(self)




    def mediaExpression(self):

        localctx = css3Parser.MediaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_mediaExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(css3Parser.T__1)
            self.state = 325
            self.ws()
            self.state = 326
            self.mediaFeature()
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.T__2:
                self.state = 327
                self.match(css3Parser.T__2)
                self.state = 328
                self.ws()
                self.state = 329
                self.expr()


            self.state = 333
            self.match(css3Parser.T__3)
            self.state = 334
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MediaFeatureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.MediaFeatureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_mediaFeature

        def enterRule(self, listener):
            if hasattr(listener, "enterMediaFeature"):
                listener.enterMediaFeature(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMediaFeature"):
                listener.exitMediaFeature(self)




    def mediaFeature(self):

        localctx = css3Parser.MediaFeatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_mediaFeature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.ident()
            self.state = 337
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Page(self):
            return self.getToken(css3Parser.Page, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def pseudoPage(self):
            return self.getTypedRuleContext(css3Parser.PseudoPageContext,0)


        def declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(css3Parser.DeclarationContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_page

        def enterRule(self, listener):
            if hasattr(listener, "enterPage"):
                listener.enterPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPage"):
                listener.exitPage(self)




    def page(self):

        localctx = css3Parser.PageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_page)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(css3Parser.Page)
            self.state = 340
            self.ws()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.T__2:
                self.state = 341
                self.pseudoPage()


            self.state = 344
            self.match(css3Parser.T__4)
            self.state = 345
            self.ws()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                self.state = 346
                self.declaration()


            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.T__0:
                self.state = 349
                self.match(css3Parser.T__0)
                self.state = 350
                self.ws()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                    self.state = 351
                    self.declaration()


                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self.match(css3Parser.T__5)
            self.state = 360
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudoPageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PseudoPageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_pseudoPage

        def enterRule(self, listener):
            if hasattr(listener, "enterPseudoPage"):
                listener.enterPseudoPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPseudoPage"):
                listener.exitPseudoPage(self)




    def pseudoPage(self):

        localctx = css3Parser.PseudoPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pseudoPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(css3Parser.T__2)
            self.state = 363
            self.ident()
            self.state = 364
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorGroupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SelectorGroupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selector(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.SelectorContext)
            else:
                return self.getTypedRuleContext(css3Parser.SelectorContext,i)


        def Comma(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comma)
            else:
                return self.getToken(css3Parser.Comma, i)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_selectorGroup

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectorGroup"):
                listener.enterSelectorGroup(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectorGroup"):
                listener.exitSelectorGroup(self)




    def selectorGroup(self):

        localctx = css3Parser.SelectorGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_selectorGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.selector()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Comma:
                self.state = 367
                self.match(css3Parser.Comma)
                self.state = 368
                self.ws()
                self.state = 369
                self.selector()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SelectorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleSelectorSequence(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.SimpleSelectorSequenceContext)
            else:
                return self.getTypedRuleContext(css3Parser.SimpleSelectorSequenceContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def combinator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.CombinatorContext)
            else:
                return self.getTypedRuleContext(css3Parser.CombinatorContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_selector

        def enterRule(self, listener):
            if hasattr(listener, "enterSelector"):
                listener.enterSelector(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelector"):
                listener.exitSelector(self)




    def selector(self):

        localctx = css3Parser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_selector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.simpleSelectorSequence()
            self.state = 377
            self.ws()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Space) | (1 << css3Parser.Plus) | (1 << css3Parser.Greater) | (1 << css3Parser.Tilde))) != 0):
                self.state = 378
                self.combinator()
                self.state = 379
                self.simpleSelectorSequence()
                self.state = 380
                self.ws()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CombinatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CombinatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(css3Parser.Plus, 0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def Greater(self):
            return self.getToken(css3Parser.Greater, 0)

        def Tilde(self):
            return self.getToken(css3Parser.Tilde, 0)

        def Space(self):
            return self.getToken(css3Parser.Space, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_combinator

        def enterRule(self, listener):
            if hasattr(listener, "enterCombinator"):
                listener.enterCombinator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCombinator"):
                listener.exitCombinator(self)




    def combinator(self):

        localctx = css3Parser.CombinatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_combinator)
        try:
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.Plus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.match(css3Parser.Plus)
                self.state = 388
                self.ws()
                pass
            elif token in [css3Parser.Greater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.match(css3Parser.Greater)
                self.state = 390
                self.ws()
                pass
            elif token in [css3Parser.Tilde]:
                self.enterOuterAlt(localctx, 3)
                self.state = 391
                self.match(css3Parser.Tilde)
                self.state = 392
                self.ws()
                pass
            elif token in [css3Parser.Space]:
                self.enterOuterAlt(localctx, 4)
                self.state = 393
                self.match(css3Parser.Space)
                self.state = 394
                self.ws()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleSelectorSequenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SimpleSelectorSequenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSelector(self):
            return self.getTypedRuleContext(css3Parser.TypeSelectorContext,0)


        def universal(self):
            return self.getTypedRuleContext(css3Parser.UniversalContext,0)


        def Hash(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Hash)
            else:
                return self.getToken(css3Parser.Hash, i)

        def className(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.ClassNameContext)
            else:
                return self.getTypedRuleContext(css3Parser.ClassNameContext,i)


        def attrib(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AttribContext)
            else:
                return self.getTypedRuleContext(css3Parser.AttribContext,i)


        def pseudo(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.PseudoContext)
            else:
                return self.getTypedRuleContext(css3Parser.PseudoContext,i)


        def negation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NegationContext)
            else:
                return self.getTypedRuleContext(css3Parser.NegationContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_simpleSelectorSequence

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleSelectorSequence"):
                listener.enterSimpleSelectorSequence(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleSelectorSequence"):
                listener.exitSimpleSelectorSequence(self)




    def simpleSelectorSequence(self):

        localctx = css3Parser.SimpleSelectorSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_simpleSelectorSequence)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.T__6, css3Parser.T__7, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                self.enterOuterAlt(localctx, 1)
                self.state = 399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self.typeSelector()
                    pass

                elif la_ == 2:
                    self.state = 398
                    self.universal()
                    pass


                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash) | (1 << css3Parser.PseudoNot))) != 0):
                    self.state = 406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.Hash]:
                        self.state = 401
                        self.match(css3Parser.Hash)
                        pass
                    elif token in [css3Parser.T__8]:
                        self.state = 402
                        self.className()
                        pass
                    elif token in [css3Parser.T__9]:
                        self.state = 403
                        self.attrib()
                        pass
                    elif token in [css3Parser.T__2]:
                        self.state = 404
                        self.pseudo()
                        pass
                    elif token in [css3Parser.PseudoNot]:
                        self.state = 405
                        self.negation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [css3Parser.T__2, css3Parser.T__8, css3Parser.T__9, css3Parser.Hash, css3Parser.PseudoNot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 416
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.Hash]:
                        self.state = 411
                        self.match(css3Parser.Hash)
                        pass
                    elif token in [css3Parser.T__8]:
                        self.state = 412
                        self.className()
                        pass
                    elif token in [css3Parser.T__9]:
                        self.state = 413
                        self.attrib()
                        pass
                    elif token in [css3Parser.T__2]:
                        self.state = 414
                        self.pseudo()
                        pass
                    elif token in [css3Parser.PseudoNot]:
                        self.state = 415
                        self.negation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 418 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash) | (1 << css3Parser.PseudoNot))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.TypeSelectorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementName(self):
            return self.getTypedRuleContext(css3Parser.ElementNameContext,0)


        def typeNamespacePrefix(self):
            return self.getTypedRuleContext(css3Parser.TypeNamespacePrefixContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_typeSelector

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeSelector"):
                listener.enterTypeSelector(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeSelector"):
                listener.exitTypeSelector(self)




    def typeSelector(self):

        localctx = css3Parser.TypeSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 422
                self.typeNamespacePrefix()


            self.state = 425
            self.elementName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNamespacePrefixContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.TypeNamespacePrefixContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_typeNamespacePrefix

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeNamespacePrefix"):
                listener.enterTypeNamespacePrefix(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeNamespacePrefix"):
                listener.exitTypeNamespacePrefix(self)




    def typeNamespacePrefix(self):

        localctx = css3Parser.TypeNamespacePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeNamespacePrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                self.state = 427
                self.ident()
                pass
            elif token in [css3Parser.T__6]:
                self.state = 428
                self.match(css3Parser.T__6)
                pass
            elif token in [css3Parser.T__7]:
                pass
            else:
                pass
            self.state = 431
            self.match(css3Parser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ElementNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_elementName

        def enterRule(self, listener):
            if hasattr(listener, "enterElementName"):
                listener.enterElementName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElementName"):
                listener.exitElementName(self)




    def elementName(self):

        localctx = css3Parser.ElementNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_elementName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UniversalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.UniversalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeNamespacePrefix(self):
            return self.getTypedRuleContext(css3Parser.TypeNamespacePrefixContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_universal

        def enterRule(self, listener):
            if hasattr(listener, "enterUniversal"):
                listener.enterUniversal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUniversal"):
                listener.exitUniversal(self)




    def universal(self):

        localctx = css3Parser.UniversalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_universal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 435
                self.typeNamespacePrefix()


            self.state = 438
            self.match(css3Parser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ClassNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_className

        def enterRule(self, listener):
            if hasattr(listener, "enterClassName"):
                listener.enterClassName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassName"):
                listener.exitClassName(self)




    def className(self):

        localctx = css3Parser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(css3Parser.T__8)
            self.state = 441
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttribContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.AttribContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def ident(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.IdentContext)
            else:
                return self.getTypedRuleContext(css3Parser.IdentContext,i)


        def typeNamespacePrefix(self):
            return self.getTypedRuleContext(css3Parser.TypeNamespacePrefixContext,0)


        def PrefixMatch(self):
            return self.getToken(css3Parser.PrefixMatch, 0)

        def SuffixMatch(self):
            return self.getToken(css3Parser.SuffixMatch, 0)

        def SubstringMatch(self):
            return self.getToken(css3Parser.SubstringMatch, 0)

        def Includes(self):
            return self.getToken(css3Parser.Includes, 0)

        def DashMatch(self):
            return self.getToken(css3Parser.DashMatch, 0)

        def String(self):
            return self.getToken(css3Parser.String, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_attrib

        def enterRule(self, listener):
            if hasattr(listener, "enterAttrib"):
                listener.enterAttrib(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttrib"):
                listener.exitAttrib(self)




    def attrib(self):

        localctx = css3Parser.AttribContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_attrib)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(css3Parser.T__9)
            self.state = 444
            self.ws()
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 445
                self.typeNamespacePrefix()


            self.state = 448
            self.ident()
            self.state = 449
            self.ws()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.PrefixMatch) | (1 << css3Parser.SuffixMatch) | (1 << css3Parser.SubstringMatch))) != 0):
                self.state = 450
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.PrefixMatch) | (1 << css3Parser.SuffixMatch) | (1 << css3Parser.SubstringMatch))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 451
                self.ws()
                self.state = 454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                    self.state = 452
                    self.ident()
                    pass
                elif token in [css3Parser.String]:
                    self.state = 453
                    self.match(css3Parser.String)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 456
                self.ws()


            self.state = 460
            self.match(css3Parser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PseudoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def functionalPseudo(self):
            return self.getTypedRuleContext(css3Parser.FunctionalPseudoContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_pseudo

        def enterRule(self, listener):
            if hasattr(listener, "enterPseudo"):
                listener.enterPseudo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPseudo"):
                listener.exitPseudo(self)




    def pseudo(self):

        localctx = css3Parser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(css3Parser.T__2)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.T__2:
                self.state = 463
                self.match(css3Parser.T__2)


            self.state = 468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                self.state = 466
                self.ident()
                pass
            elif token in [css3Parser.Function]:
                self.state = 467
                self.functionalPseudo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionalPseudoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FunctionalPseudoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(css3Parser.Function, 0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def expression(self):
            return self.getTypedRuleContext(css3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_functionalPseudo

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionalPseudo"):
                listener.enterFunctionalPseudo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionalPseudo"):
                listener.exitFunctionalPseudo(self)




    def functionalPseudo(self):

        localctx = css3Parser.FunctionalPseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionalPseudo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(css3Parser.Function)
            self.state = 471
            self.ws()
            self.state = 472
            self.expression()
            self.state = 473
            self.match(css3Parser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Plus(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Plus)
            else:
                return self.getToken(css3Parser.Plus, i)

        def Minus(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Minus)
            else:
                return self.getToken(css3Parser.Minus, i)

        def Dimension(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Dimension)
            else:
                return self.getToken(css3Parser.Dimension, i)

        def UnknownDimension(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.UnknownDimension)
            else:
                return self.getToken(css3Parser.UnknownDimension, i)

        def Number(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Number)
            else:
                return self.getToken(css3Parser.Number, i)

        def String(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.String)
            else:
                return self.getToken(css3Parser.String, i)

        def ident(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.IdentContext)
            else:
                return self.getTypedRuleContext(css3Parser.IdentContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)




    def expression(self):

        localctx = css3Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [css3Parser.Plus]:
                    self.state = 475
                    self.match(css3Parser.Plus)
                    pass
                elif token in [css3Parser.Minus]:
                    self.state = 476
                    self.match(css3Parser.Minus)
                    pass
                elif token in [css3Parser.Dimension]:
                    self.state = 477
                    self.match(css3Parser.Dimension)
                    pass
                elif token in [css3Parser.UnknownDimension]:
                    self.state = 478
                    self.match(css3Parser.UnknownDimension)
                    pass
                elif token in [css3Parser.Number]:
                    self.state = 479
                    self.match(css3Parser.Number)
                    pass
                elif token in [css3Parser.String]:
                    self.state = 480
                    self.match(css3Parser.String)
                    pass
                elif token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                    self.state = 481
                    self.ident()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 484
                self.ws()
                self.state = 487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NegationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NegationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PseudoNot(self):
            return self.getToken(css3Parser.PseudoNot, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def negationArg(self):
            return self.getTypedRuleContext(css3Parser.NegationArgContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_negation

        def enterRule(self, listener):
            if hasattr(listener, "enterNegation"):
                listener.enterNegation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNegation"):
                listener.exitNegation(self)




    def negation(self):

        localctx = css3Parser.NegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_negation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(css3Parser.PseudoNot)
            self.state = 490
            self.ws()
            self.state = 491
            self.negationArg()
            self.state = 492
            self.ws()
            self.state = 493
            self.match(css3Parser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NegationArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NegationArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSelector(self):
            return self.getTypedRuleContext(css3Parser.TypeSelectorContext,0)


        def universal(self):
            return self.getTypedRuleContext(css3Parser.UniversalContext,0)


        def Hash(self):
            return self.getToken(css3Parser.Hash, 0)

        def className(self):
            return self.getTypedRuleContext(css3Parser.ClassNameContext,0)


        def attrib(self):
            return self.getTypedRuleContext(css3Parser.AttribContext,0)


        def pseudo(self):
            return self.getTypedRuleContext(css3Parser.PseudoContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_negationArg

        def enterRule(self, listener):
            if hasattr(listener, "enterNegationArg"):
                listener.enterNegationArg(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNegationArg"):
                listener.exitNegationArg(self)




    def negationArg(self):

        localctx = css3Parser.NegationArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_negationArg)
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.typeSelector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.universal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.match(css3Parser.Hash)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.className()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.attrib()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                self.pseudo()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.OperatorContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_operator

     
        def copyFrom(self, ctx):
            super(css3Parser.OperatorContext, self).copyFrom(ctx)



    class BadOperatorContext(OperatorContext):

        def __init__(self, parser, ctx): # actually a css3Parser.OperatorContext)
            super(css3Parser.BadOperatorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterBadOperator"):
                listener.enterBadOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadOperator"):
                listener.exitBadOperator(self)


    class GoodOperatorContext(OperatorContext):

        def __init__(self, parser, ctx): # actually a css3Parser.OperatorContext)
            super(css3Parser.GoodOperatorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def Comma(self):
            return self.getToken(css3Parser.Comma, 0)
        def Space(self):
            return self.getToken(css3Parser.Space, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGoodOperator"):
                listener.enterGoodOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoodOperator"):
                listener.exitGoodOperator(self)



    def operator(self):

        localctx = css3Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_operator)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.T__12]:
                localctx = css3Parser.GoodOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(css3Parser.T__12)
                self.state = 504
                self.ws()
                pass
            elif token in [css3Parser.Comma]:
                localctx = css3Parser.GoodOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(css3Parser.Comma)
                self.state = 506
                self.ws()
                pass
            elif token in [css3Parser.Space]:
                localctx = css3Parser.GoodOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(css3Parser.Space)
                self.state = 508
                self.ws()
                pass
            elif token in [css3Parser.T__10]:
                localctx = css3Parser.BadOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 509
                self.match(css3Parser.T__10)
                self.state = 510
                self.ws()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PropertyContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_property

     
        def copyFrom(self, ctx):
            super(css3Parser.PropertyContext, self).copyFrom(ctx)



    class BadPropertyContext(PropertyContext):

        def __init__(self, parser, ctx): # actually a css3Parser.PropertyContext)
            super(css3Parser.BadPropertyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterBadProperty"):
                listener.enterBadProperty(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadProperty"):
                listener.exitBadProperty(self)


    class GoodPropertyContext(PropertyContext):

        def __init__(self, parser, ctx): # actually a css3Parser.PropertyContext)
            super(css3Parser.GoodPropertyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def Variable(self):
            return self.getToken(css3Parser.Variable, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGoodProperty"):
                listener.enterGoodProperty(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoodProperty"):
                listener.exitGoodProperty(self)



    def property(self):

        localctx = css3Parser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_property)
        try:
            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                localctx = css3Parser.GoodPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.ident()
                self.state = 514
                self.ws()
                pass
            elif token in [css3Parser.Variable]:
                localctx = css3Parser.GoodPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(css3Parser.Variable)
                self.state = 517
                self.ws()
                pass
            elif token in [css3Parser.T__6]:
                localctx = css3Parser.BadPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.match(css3Parser.T__6)
                self.state = 519
                self.ident()
                pass
            elif token in [css3Parser.T__13]:
                localctx = css3Parser.BadPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.match(css3Parser.T__13)
                self.state = 521
                self.ident()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.RulesetContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_ruleset

     
        def copyFrom(self, ctx):
            super(css3Parser.RulesetContext, self).copyFrom(ctx)



    class UnknownRulesetContext(RulesetContext):

        def __init__(self, parser, ctx): # actually a css3Parser.RulesetContext)
            super(css3Parser.UnknownRulesetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)

        def declarationList(self):
            return self.getTypedRuleContext(css3Parser.DeclarationListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownRuleset"):
                listener.enterUnknownRuleset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownRuleset"):
                listener.exitUnknownRuleset(self)


    class KnownRulesetContext(RulesetContext):

        def __init__(self, parser, ctx): # actually a css3Parser.RulesetContext)
            super(css3Parser.KnownRulesetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def selectorGroup(self):
            return self.getTypedRuleContext(css3Parser.SelectorGroupContext,0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def declarationList(self):
            return self.getTypedRuleContext(css3Parser.DeclarationListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterKnownRuleset"):
                listener.enterKnownRuleset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKnownRuleset"):
                listener.exitKnownRuleset(self)



    def ruleset(self):

        localctx = css3Parser.RulesetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ruleset)
        self._la = 0 # Token type
        try:
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                localctx = css3Parser.KnownRulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.selectorGroup()
                self.state = 525
                self.match(css3Parser.T__4)
                self.state = 526
                self.ws()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                    self.state = 527
                    self.declarationList()


                self.state = 530
                self.match(css3Parser.T__5)
                self.state = 531
                self.ws()
                pass

            elif la_ == 2:
                localctx = css3Parser.UnknownRulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                    self.state = 533
                    self.any()
                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 539
                self.match(css3Parser.T__4)
                self.state = 540
                self.ws()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                    self.state = 541
                    self.declarationList()


                self.state = 544
                self.match(css3Parser.T__5)
                self.state = 545
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.DeclarationListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(css3Parser.DeclarationContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_declarationList

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclarationList"):
                listener.enterDeclarationList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclarationList"):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = css3Parser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.T__0:
                self.state = 549
                self.match(css3Parser.T__0)
                self.state = 550
                self.ws()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 556
            self.declaration()
            self.state = 557
            self.ws()
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 558
                    self.match(css3Parser.T__0)
                    self.state = 559
                    self.ws()
                    self.state = 561
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 560
                        self.declaration()

             
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.DeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_declaration

     
        def copyFrom(self, ctx):
            super(css3Parser.DeclarationContext, self).copyFrom(ctx)



    class UnknownDeclarationContext(DeclarationContext):

        def __init__(self, parser, ctx): # actually a css3Parser.DeclarationContext)
            super(css3Parser.UnknownDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def property(self):
            return self.getTypedRuleContext(css3Parser.PropertyContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def value(self):
            return self.getTypedRuleContext(css3Parser.ValueContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownDeclaration"):
                listener.enterUnknownDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownDeclaration"):
                listener.exitUnknownDeclaration(self)


    class KnownDeclarationContext(DeclarationContext):

        def __init__(self, parser, ctx): # actually a css3Parser.DeclarationContext)
            super(css3Parser.KnownDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def property(self):
            return self.getTypedRuleContext(css3Parser.PropertyContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def expr(self):
            return self.getTypedRuleContext(css3Parser.ExprContext,0)

        def prio(self):
            return self.getTypedRuleContext(css3Parser.PrioContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterKnownDeclaration"):
                listener.enterKnownDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKnownDeclaration"):
                listener.exitKnownDeclaration(self)



    def declaration(self):

        localctx = css3Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = css3Parser.KnownDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.property()
                self.state = 569
                self.match(css3Parser.T__2)
                self.state = 570
                self.ws()
                self.state = 571
                self.expr()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==css3Parser.Important:
                    self.state = 572
                    self.prio()


                pass

            elif la_ == 2:
                localctx = css3Parser.UnknownDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.property()
                self.state = 576
                self.match(css3Parser.T__2)
                self.state = 577
                self.ws()
                self.state = 578
                self.value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrioContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PrioContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Important(self):
            return self.getToken(css3Parser.Important, 0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_prio

        def enterRule(self, listener):
            if hasattr(listener, "enterPrio"):
                listener.enterPrio(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrio"):
                listener.exitPrio(self)




    def prio(self):

        localctx = css3Parser.PrioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_prio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(css3Parser.Important)
            self.state = 583
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)


        def block(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(css3Parser.BlockContext,i)


        def atKeyword(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AtKeywordContext)
            else:
                return self.getTypedRuleContext(css3Parser.AtKeywordContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_value

        def enterRule(self, listener):
            if hasattr(listener, "enterValue"):
                listener.enterValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitValue"):
                listener.exitValue(self)




    def value(self):

        localctx = css3Parser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 590
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                        self.state = 585
                        self.any()
                        pass
                    elif token in [css3Parser.T__4]:
                        self.state = 586
                        self.block()
                        pass
                    elif token in [css3Parser.T__14]:
                        self.state = 587
                        self.atKeyword()
                        self.state = 588
                        self.ws()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 592 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.TermContext)
            else:
                return self.getTypedRuleContext(css3Parser.TermContext,i)


        def operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.OperatorContext)
            else:
                return self.getTypedRuleContext(css3Parser.OperatorContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)




    def expr(self):

        localctx = css3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.term()
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.T__12) | (1 << css3Parser.Space) | (1 << css3Parser.Comma))) != 0):
                        self.state = 595
                        self.operator()


                    self.state = 598
                    self.term() 
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.TermContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_term

     
        def copyFrom(self, ctx):
            super(css3Parser.TermContext, self).copyFrom(ctx)



    class BadTermContext(TermContext):

        def __init__(self, parser, ctx): # actually a css3Parser.TermContext)
            super(css3Parser.BadTermContext, self).__init__(parser)
            self.copyFrom(ctx)

        def dxImageTransform(self):
            return self.getTypedRuleContext(css3Parser.DxImageTransformContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterBadTerm"):
                listener.enterBadTerm(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBadTerm"):
                listener.exitBadTerm(self)


    class KnownTermContext(TermContext):

        def __init__(self, parser, ctx): # actually a css3Parser.TermContext)
            super(css3Parser.KnownTermContext, self).__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(css3Parser.NumberContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def percentage(self):
            return self.getTypedRuleContext(css3Parser.PercentageContext,0)

        def dimension(self):
            return self.getTypedRuleContext(css3Parser.DimensionContext,0)

        def String(self):
            return self.getToken(css3Parser.String, 0)
        def UnicodeRange(self):
            return self.getToken(css3Parser.UnicodeRange, 0)
        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)

        def var(self):
            return self.getTypedRuleContext(css3Parser.VarContext,0)

        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)
        def hexcolor(self):
            return self.getTypedRuleContext(css3Parser.HexcolorContext,0)

        def calc(self):
            return self.getTypedRuleContext(css3Parser.CalcContext,0)

        def function(self):
            return self.getTypedRuleContext(css3Parser.FunctionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterKnownTerm"):
                listener.enterKnownTerm(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKnownTerm"):
                listener.exitKnownTerm(self)


    class UnknownTermContext(TermContext):

        def __init__(self, parser, ctx): # actually a css3Parser.TermContext)
            super(css3Parser.UnknownTermContext, self).__init__(parser)
            self.copyFrom(ctx)

        def unknownDimension(self):
            return self.getTypedRuleContext(css3Parser.UnknownDimensionContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownTerm"):
                listener.enterUnknownTerm(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownTerm"):
                listener.exitUnknownTerm(self)



    def term(self):

        localctx = css3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_term)
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.number()
                self.state = 605
                self.ws()
                pass

            elif la_ == 2:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.percentage()
                self.state = 608
                self.ws()
                pass

            elif la_ == 3:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.dimension()
                self.state = 611
                self.ws()
                pass

            elif la_ == 4:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 613
                self.match(css3Parser.String)
                self.state = 614
                self.ws()
                pass

            elif la_ == 5:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 615
                self.match(css3Parser.UnicodeRange)
                self.state = 616
                self.ws()
                pass

            elif la_ == 6:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 617
                self.ident()
                self.state = 618
                self.ws()
                pass

            elif la_ == 7:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 620
                self.var()
                pass

            elif la_ == 8:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 621
                self.match(css3Parser.Uri)
                self.state = 622
                self.ws()
                pass

            elif la_ == 9:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 623
                self.hexcolor()
                pass

            elif la_ == 10:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 624
                self.calc()
                pass

            elif la_ == 11:
                localctx = css3Parser.KnownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 625
                self.function()
                pass

            elif la_ == 12:
                localctx = css3Parser.UnknownTermContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 626
                self.unknownDimension()
                self.state = 627
                self.ws()
                pass

            elif la_ == 13:
                localctx = css3Parser.BadTermContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 629
                self.dxImageTransform()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(css3Parser.Function, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def expr(self):
            return self.getTypedRuleContext(css3Parser.ExprContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_function

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction"):
                listener.enterFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction"):
                listener.exitFunction(self)




    def function(self):

        localctx = css3Parser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(css3Parser.Function)
            self.state = 633
            self.ws()
            self.state = 634
            self.expr()
            self.state = 635
            self.match(css3Parser.T__3)
            self.state = 636
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DxImageTransformContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.DxImageTransformContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DxImageTransform(self):
            return self.getToken(css3Parser.DxImageTransform, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def expr(self):
            return self.getTypedRuleContext(css3Parser.ExprContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_dxImageTransform

        def enterRule(self, listener):
            if hasattr(listener, "enterDxImageTransform"):
                listener.enterDxImageTransform(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDxImageTransform"):
                listener.exitDxImageTransform(self)




    def dxImageTransform(self):

        localctx = css3Parser.DxImageTransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dxImageTransform)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(css3Parser.DxImageTransform)
            self.state = 639
            self.ws()
            self.state = 640
            self.expr()
            self.state = 641
            self.match(css3Parser.T__3)
            self.state = 642
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexcolorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.HexcolorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Hash(self):
            return self.getToken(css3Parser.Hash, 0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_hexcolor

        def enterRule(self, listener):
            if hasattr(listener, "enterHexcolor"):
                listener.enterHexcolor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHexcolor"):
                listener.exitHexcolor(self)




    def hexcolor(self):

        localctx = css3Parser.HexcolorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hexcolor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(css3Parser.Hash)
            self.state = 645
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NumberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(css3Parser.Number, 0)

        def Plus(self):
            return self.getToken(css3Parser.Plus, 0)

        def Minus(self):
            return self.getToken(css3Parser.Minus, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_number

        def enterRule(self, listener):
            if hasattr(listener, "enterNumber"):
                listener.enterNumber(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumber"):
                listener.exitNumber(self)




    def number(self):

        localctx = css3Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.Plus or _la==css3Parser.Minus:
                self.state = 647
                _la = self._input.LA(1)
                if not(_la==css3Parser.Plus or _la==css3Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 650
            self.match(css3Parser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PercentageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.PercentageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Percentage(self):
            return self.getToken(css3Parser.Percentage, 0)

        def Plus(self):
            return self.getToken(css3Parser.Plus, 0)

        def Minus(self):
            return self.getToken(css3Parser.Minus, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_percentage

        def enterRule(self, listener):
            if hasattr(listener, "enterPercentage"):
                listener.enterPercentage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPercentage"):
                listener.exitPercentage(self)




    def percentage(self):

        localctx = css3Parser.PercentageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_percentage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.Plus or _la==css3Parser.Minus:
                self.state = 652
                _la = self._input.LA(1)
                if not(_la==css3Parser.Plus or _la==css3Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 655
            self.match(css3Parser.Percentage)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.DimensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Dimension(self):
            return self.getToken(css3Parser.Dimension, 0)

        def Plus(self):
            return self.getToken(css3Parser.Plus, 0)

        def Minus(self):
            return self.getToken(css3Parser.Minus, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_dimension

        def enterRule(self, listener):
            if hasattr(listener, "enterDimension"):
                listener.enterDimension(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDimension"):
                listener.exitDimension(self)




    def dimension(self):

        localctx = css3Parser.DimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.Plus or _la==css3Parser.Minus:
                self.state = 657
                _la = self._input.LA(1)
                if not(_la==css3Parser.Plus or _la==css3Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 660
            self.match(css3Parser.Dimension)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnknownDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.UnknownDimensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UnknownDimension(self):
            return self.getToken(css3Parser.UnknownDimension, 0)

        def Plus(self):
            return self.getToken(css3Parser.Plus, 0)

        def Minus(self):
            return self.getToken(css3Parser.Minus, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_unknownDimension

        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownDimension"):
                listener.enterUnknownDimension(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownDimension"):
                listener.exitUnknownDimension(self)




    def unknownDimension(self):

        localctx = css3Parser.UnknownDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_unknownDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==css3Parser.Plus or _la==css3Parser.Minus:
                self.state = 662
                _la = self._input.LA(1)
                if not(_la==css3Parser.Plus or _la==css3Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 665
            self.match(css3Parser.UnknownDimension)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.AnyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def number(self):
            return self.getTypedRuleContext(css3Parser.NumberContext,0)


        def percentage(self):
            return self.getTypedRuleContext(css3Parser.PercentageContext,0)


        def dimension(self):
            return self.getTypedRuleContext(css3Parser.DimensionContext,0)


        def unknownDimension(self):
            return self.getTypedRuleContext(css3Parser.UnknownDimensionContext,0)


        def String(self):
            return self.getToken(css3Parser.String, 0)

        def Uri(self):
            return self.getToken(css3Parser.Uri, 0)

        def Hash(self):
            return self.getToken(css3Parser.Hash, 0)

        def UnicodeRange(self):
            return self.getToken(css3Parser.UnicodeRange, 0)

        def Includes(self):
            return self.getToken(css3Parser.Includes, 0)

        def DashMatch(self):
            return self.getToken(css3Parser.DashMatch, 0)

        def Function(self):
            return self.getToken(css3Parser.Function, 0)

        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)


        def unused(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.UnusedContext)
            else:
                return self.getTypedRuleContext(css3Parser.UnusedContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_any

        def enterRule(self, listener):
            if hasattr(listener, "enterAny"):
                listener.enterAny(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny"):
                listener.exitAny(self)




    def any(self):

        localctx = css3Parser.AnyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_any)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.ident()
                self.state = 668
                self.ws()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.number()
                self.state = 671
                self.ws()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self.percentage()
                self.state = 674
                self.ws()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 676
                self.dimension()
                self.state = 677
                self.ws()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 679
                self.unknownDimension()
                self.state = 680
                self.ws()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 682
                self.match(css3Parser.String)
                self.state = 683
                self.ws()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 684
                self.match(css3Parser.Uri)
                self.state = 685
                self.ws()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 686
                self.match(css3Parser.Hash)
                self.state = 687
                self.ws()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 688
                self.match(css3Parser.UnicodeRange)
                self.state = 689
                self.ws()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 690
                self.match(css3Parser.Includes)
                self.state = 691
                self.ws()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 692
                self.match(css3Parser.DashMatch)
                self.state = 693
                self.ws()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 694
                self.match(css3Parser.T__2)
                self.state = 695
                self.ws()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 696
                self.match(css3Parser.Function)
                self.state = 697
                self.ws()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                    self.state = 700
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                        self.state = 698
                        self.any()
                        pass
                    elif token in [css3Parser.T__0, css3Parser.T__4, css3Parser.T__14, css3Parser.Cdo, css3Parser.Cdc]:
                        self.state = 699
                        self.unused()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 705
                self.match(css3Parser.T__3)
                self.state = 706
                self.ws()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 708
                self.match(css3Parser.T__1)
                self.state = 709
                self.ws()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                    self.state = 712
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                        self.state = 710
                        self.any()
                        pass
                    elif token in [css3Parser.T__0, css3Parser.T__4, css3Parser.T__14, css3Parser.Cdo, css3Parser.Cdc]:
                        self.state = 711
                        self.unused()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 717
                self.match(css3Parser.T__3)
                self.state = 718
                self.ws()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 720
                self.match(css3Parser.T__9)
                self.state = 721
                self.ws()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                    self.state = 724
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                        self.state = 722
                        self.any()
                        pass
                    elif token in [css3Parser.T__0, css3Parser.T__4, css3Parser.T__14, css3Parser.Cdo, css3Parser.Cdc]:
                        self.state = 723
                        self.unused()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 729
                self.match(css3Parser.T__11)
                self.state = 730
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.AtRuleContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_atRule

     
        def copyFrom(self, ctx):
            super(css3Parser.AtRuleContext, self).copyFrom(ctx)



    class UnknownAtRuleContext(AtRuleContext):

        def __init__(self, parser, ctx): # actually a css3Parser.AtRuleContext)
            super(css3Parser.UnknownAtRuleContext, self).__init__(parser)
            self.copyFrom(ctx)

        def atKeyword(self):
            return self.getTypedRuleContext(css3Parser.AtKeywordContext,0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)

        def block(self):
            return self.getTypedRuleContext(css3Parser.BlockContext,0)

        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownAtRule"):
                listener.enterUnknownAtRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownAtRule"):
                listener.exitUnknownAtRule(self)



    def atRule(self):

        localctx = css3Parser.AtRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_atRule)
        self._la = 0 # Token type
        try:
            localctx = css3Parser.UnknownAtRuleContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.atKeyword()
            self.state = 735
            self.ws()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                self.state = 736
                self.any()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.T__4]:
                self.state = 742
                self.block()
                pass
            elif token in [css3Parser.T__0]:
                self.state = 743
                self.match(css3Parser.T__0)
                self.state = 744
                self.ws()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.AtKeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_atKeyword

        def enterRule(self, listener):
            if hasattr(listener, "enterAtKeyword"):
                listener.enterAtKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAtKeyword"):
                listener.exitAtKeyword(self)




    def atKeyword(self):

        localctx = css3Parser.AtKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_atKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(css3Parser.T__14)
            self.state = 748
            self.ident()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnusedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.UnusedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(css3Parser.BlockContext,0)


        def atKeyword(self):
            return self.getTypedRuleContext(css3Parser.AtKeywordContext,0)


        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def Cdo(self):
            return self.getToken(css3Parser.Cdo, 0)

        def Cdc(self):
            return self.getToken(css3Parser.Cdc, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_unused

        def enterRule(self, listener):
            if hasattr(listener, "enterUnused"):
                listener.enterUnused(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnused"):
                listener.exitUnused(self)




    def unused(self):

        localctx = css3Parser.UnusedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_unused)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.block()
                pass
            elif token in [css3Parser.T__14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.atKeyword()
                self.state = 752
                self.ws()
                pass
            elif token in [css3Parser.T__0]:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.match(css3Parser.T__0)
                self.state = 755
                self.ws()
                pass
            elif token in [css3Parser.Cdo]:
                self.enterOuterAlt(localctx, 4)
                self.state = 756
                self.match(css3Parser.Cdo)
                self.state = 757
                self.ws()
                pass
            elif token in [css3Parser.Cdc]:
                self.enterOuterAlt(localctx, 5)
                self.state = 758
                self.match(css3Parser.Cdc)
                self.state = 759
                self.ws()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.BlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def declarationList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.DeclarationListContext)
            else:
                return self.getTypedRuleContext(css3Parser.DeclarationListContext,i)


        def nestedStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NestedStatementContext)
            else:
                return self.getTypedRuleContext(css3Parser.NestedStatementContext,i)


        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)


        def block(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(css3Parser.BlockContext,i)


        def atKeyword(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AtKeywordContext)
            else:
                return self.getTypedRuleContext(css3Parser.AtKeywordContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_block

        def enterRule(self, listener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)




    def block(self):

        localctx = css3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(css3Parser.T__4)
            self.state = 763
            self.ws()
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__13) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.PseudoNot) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.FontFace) | (1 << css3Parser.Supports) | (1 << css3Parser.Or) | (1 << css3Parser.Keyframes) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Viewport) | (1 << css3Parser.CounterStyle) | (1 << css3Parser.FontFeatureValues) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                self.state = 773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 764
                    self.declarationList()
                    pass

                elif la_ == 2:
                    self.state = 765
                    self.nestedStatement()
                    pass

                elif la_ == 3:
                    self.state = 766
                    self.any()
                    pass

                elif la_ == 4:
                    self.state = 767
                    self.block()
                    pass

                elif la_ == 5:
                    self.state = 768
                    self.atKeyword()
                    self.state = 769
                    self.ws()
                    pass

                elif la_ == 6:
                    self.state = 771
                    self.match(css3Parser.T__0)
                    self.state = 772
                    self.ws()
                    pass


                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 778
            self.match(css3Parser.T__5)
            self.state = 779
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.NestedStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ruleset(self):
            return self.getTypedRuleContext(css3Parser.RulesetContext,0)


        def media(self):
            return self.getTypedRuleContext(css3Parser.MediaContext,0)


        def page(self):
            return self.getTypedRuleContext(css3Parser.PageContext,0)


        def fontFaceRule(self):
            return self.getTypedRuleContext(css3Parser.FontFaceRuleContext,0)


        def keyframesRule(self):
            return self.getTypedRuleContext(css3Parser.KeyframesRuleContext,0)


        def supportsRule(self):
            return self.getTypedRuleContext(css3Parser.SupportsRuleContext,0)


        def viewport(self):
            return self.getTypedRuleContext(css3Parser.ViewportContext,0)


        def counterStyle(self):
            return self.getTypedRuleContext(css3Parser.CounterStyleContext,0)


        def fontFeatureValuesRule(self):
            return self.getTypedRuleContext(css3Parser.FontFeatureValuesRuleContext,0)


        def atRule(self):
            return self.getTypedRuleContext(css3Parser.AtRuleContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_nestedStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterNestedStatement"):
                listener.enterNestedStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNestedStatement"):
                listener.exitNestedStatement(self)




    def nestedStatement(self):

        localctx = css3Parser.NestedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_nestedStatement)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__4, css3Parser.T__6, css3Parser.T__7, css3Parser.T__8, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.PseudoNot, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.ruleset()
                pass
            elif token in [css3Parser.Media]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.media()
                pass
            elif token in [css3Parser.Page]:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.page()
                pass
            elif token in [css3Parser.FontFace]:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.fontFaceRule()
                pass
            elif token in [css3Parser.Keyframes]:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.keyframesRule()
                pass
            elif token in [css3Parser.Supports]:
                self.enterOuterAlt(localctx, 6)
                self.state = 786
                self.supportsRule()
                pass
            elif token in [css3Parser.Viewport]:
                self.enterOuterAlt(localctx, 7)
                self.state = 787
                self.viewport()
                pass
            elif token in [css3Parser.CounterStyle]:
                self.enterOuterAlt(localctx, 8)
                self.state = 788
                self.counterStyle()
                pass
            elif token in [css3Parser.FontFeatureValues]:
                self.enterOuterAlt(localctx, 9)
                self.state = 789
                self.fontFeatureValuesRule()
                pass
            elif token in [css3Parser.T__14]:
                self.enterOuterAlt(localctx, 10)
                self.state = 790
                self.atRule()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupRuleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.GroupRuleBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def nestedStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NestedStatementContext)
            else:
                return self.getTypedRuleContext(css3Parser.NestedStatementContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_groupRuleBody

        def enterRule(self, listener):
            if hasattr(listener, "enterGroupRuleBody"):
                listener.enterGroupRuleBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroupRuleBody"):
                listener.exitGroupRuleBody(self)




    def groupRuleBody(self):

        localctx = css3Parser.GroupRuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_groupRuleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(css3Parser.T__4)
            self.state = 794
            self.ws()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.PseudoNot) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.FontFace) | (1 << css3Parser.Supports) | (1 << css3Parser.Or) | (1 << css3Parser.Keyframes) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Viewport) | (1 << css3Parser.CounterStyle) | (1 << css3Parser.FontFeatureValues) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                self.state = 795
                self.nestedStatement()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 801
            self.match(css3Parser.T__5)
            self.state = 802
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsRuleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Supports(self):
            return self.getToken(css3Parser.Supports, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def supportsCondition(self):
            return self.getTypedRuleContext(css3Parser.SupportsConditionContext,0)


        def groupRuleBody(self):
            return self.getTypedRuleContext(css3Parser.GroupRuleBodyContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_supportsRule

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsRule"):
                listener.enterSupportsRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsRule"):
                listener.exitSupportsRule(self)




    def supportsRule(self):

        localctx = css3Parser.SupportsRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_supportsRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(css3Parser.Supports)
            self.state = 805
            self.ws()
            self.state = 806
            self.supportsCondition()
            self.state = 807
            self.ws()
            self.state = 808
            self.groupRuleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def supportsNegation(self):
            return self.getTypedRuleContext(css3Parser.SupportsNegationContext,0)


        def supportsConjunction(self):
            return self.getTypedRuleContext(css3Parser.SupportsConjunctionContext,0)


        def supportsDisjunction(self):
            return self.getTypedRuleContext(css3Parser.SupportsDisjunctionContext,0)


        def supportsConditionInParens(self):
            return self.getTypedRuleContext(css3Parser.SupportsConditionInParensContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_supportsCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsCondition"):
                listener.enterSupportsCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsCondition"):
                listener.exitSupportsCondition(self)




    def supportsCondition(self):

        localctx = css3Parser.SupportsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_supportsCondition)
        try:
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.supportsNegation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.supportsConjunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.supportsDisjunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 813
                self.supportsConditionInParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsConditionInParensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsConditionInParensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def supportsCondition(self):
            return self.getTypedRuleContext(css3Parser.SupportsConditionContext,0)


        def supportsDeclarationCondition(self):
            return self.getTypedRuleContext(css3Parser.SupportsDeclarationConditionContext,0)


        def generalEnclosed(self):
            return self.getTypedRuleContext(css3Parser.GeneralEnclosedContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_supportsConditionInParens

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsConditionInParens"):
                listener.enterSupportsConditionInParens(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsConditionInParens"):
                listener.exitSupportsConditionInParens(self)




    def supportsConditionInParens(self):

        localctx = css3Parser.SupportsConditionInParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_supportsConditionInParens)
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(css3Parser.T__1)
                self.state = 817
                self.ws()
                self.state = 818
                self.supportsCondition()
                self.state = 819
                self.ws()
                self.state = 820
                self.match(css3Parser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.supportsDeclarationCondition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 823
                self.generalEnclosed()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsNegationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsNegationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Not(self):
            return self.getToken(css3Parser.Not, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Space(self):
            return self.getToken(css3Parser.Space, 0)

        def supportsConditionInParens(self):
            return self.getTypedRuleContext(css3Parser.SupportsConditionInParensContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_supportsNegation

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsNegation"):
                listener.enterSupportsNegation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsNegation"):
                listener.exitSupportsNegation(self)




    def supportsNegation(self):

        localctx = css3Parser.SupportsNegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_supportsNegation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(css3Parser.Not)
            self.state = 827
            self.ws()
            self.state = 828
            self.match(css3Parser.Space)
            self.state = 829
            self.ws()
            self.state = 830
            self.supportsConditionInParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsConjunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def supportsConditionInParens(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.SupportsConditionInParensContext)
            else:
                return self.getTypedRuleContext(css3Parser.SupportsConditionInParensContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Space(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Space)
            else:
                return self.getToken(css3Parser.Space, i)

        def And(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.And)
            else:
                return self.getToken(css3Parser.And, i)

        def getRuleIndex(self):
            return css3Parser.RULE_supportsConjunction

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsConjunction"):
                listener.enterSupportsConjunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsConjunction"):
                listener.exitSupportsConjunction(self)




    def supportsConjunction(self):

        localctx = css3Parser.SupportsConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_supportsConjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.supportsConditionInParens()
            self.state = 842 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 833
                    self.ws()
                    self.state = 834
                    self.match(css3Parser.Space)
                    self.state = 835
                    self.ws()
                    self.state = 836
                    self.match(css3Parser.And)
                    self.state = 837
                    self.ws()
                    self.state = 838
                    self.match(css3Parser.Space)
                    self.state = 839
                    self.ws()
                    self.state = 840
                    self.supportsConditionInParens()

                else:
                    raise NoViableAltException(self)
                self.state = 844 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsDisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsDisjunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def supportsConditionInParens(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.SupportsConditionInParensContext)
            else:
                return self.getTypedRuleContext(css3Parser.SupportsConditionInParensContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Space(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Space)
            else:
                return self.getToken(css3Parser.Space, i)

        def Or(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Or)
            else:
                return self.getToken(css3Parser.Or, i)

        def getRuleIndex(self):
            return css3Parser.RULE_supportsDisjunction

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsDisjunction"):
                listener.enterSupportsDisjunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsDisjunction"):
                listener.exitSupportsDisjunction(self)




    def supportsDisjunction(self):

        localctx = css3Parser.SupportsDisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_supportsDisjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.supportsConditionInParens()
            self.state = 856 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 847
                    self.ws()
                    self.state = 848
                    self.match(css3Parser.Space)
                    self.state = 849
                    self.ws()
                    self.state = 850
                    self.match(css3Parser.Or)
                    self.state = 851
                    self.ws()
                    self.state = 852
                    self.match(css3Parser.Space)
                    self.state = 853
                    self.ws()
                    self.state = 854
                    self.supportsConditionInParens()

                else:
                    raise NoViableAltException(self)
                self.state = 858 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupportsDeclarationConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.SupportsDeclarationConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)


        def declaration(self):
            return self.getTypedRuleContext(css3Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_supportsDeclarationCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterSupportsDeclarationCondition"):
                listener.enterSupportsDeclarationCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSupportsDeclarationCondition"):
                listener.exitSupportsDeclarationCondition(self)




    def supportsDeclarationCondition(self):

        localctx = css3Parser.SupportsDeclarationConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_supportsDeclarationCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(css3Parser.T__1)
            self.state = 861
            self.ws()
            self.state = 862
            self.declaration()
            self.state = 863
            self.match(css3Parser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralEnclosedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.GeneralEnclosedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(css3Parser.Function, 0)

        def any(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.AnyContext)
            else:
                return self.getTypedRuleContext(css3Parser.AnyContext,i)


        def unused(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.UnusedContext)
            else:
                return self.getTypedRuleContext(css3Parser.UnusedContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_generalEnclosed

        def enterRule(self, listener):
            if hasattr(listener, "enterGeneralEnclosed"):
                listener.enterGeneralEnclosed(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGeneralEnclosed"):
                listener.exitGeneralEnclosed(self)




    def generalEnclosed(self):

        localctx = css3Parser.GeneralEnclosedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_generalEnclosed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            _la = self._input.LA(1)
            if not(_la==css3Parser.T__1 or _la==css3Parser.Function):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Dimension) | (1 << css3Parser.UnknownDimension) | (1 << css3Parser.Plus) | (1 << css3Parser.Minus) | (1 << css3Parser.Number) | (1 << css3Parser.String) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident) | (1 << css3Parser.Function))) != 0):
                self.state = 868
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [css3Parser.T__1, css3Parser.T__2, css3Parser.T__9, css3Parser.Includes, css3Parser.DashMatch, css3Parser.Hash, css3Parser.Percentage, css3Parser.Uri, css3Parser.UnicodeRange, css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Dimension, css3Parser.UnknownDimension, css3Parser.Plus, css3Parser.Minus, css3Parser.Number, css3Parser.String, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident, css3Parser.Function]:
                    self.state = 866
                    self.any()
                    pass
                elif token in [css3Parser.T__0, css3Parser.T__4, css3Parser.T__14, css3Parser.Cdo, css3Parser.Cdc]:
                    self.state = 867
                    self.unused()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 873
            self.match(css3Parser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.VarContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(css3Parser.Var, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Variable(self):
            return self.getToken(css3Parser.Variable, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_var

        def enterRule(self, listener):
            if hasattr(listener, "enterVar"):
                listener.enterVar(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVar"):
                listener.exitVar(self)




    def var(self):

        localctx = css3Parser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(css3Parser.Var)
            self.state = 876
            self.ws()
            self.state = 877
            self.match(css3Parser.Variable)
            self.state = 878
            self.ws()
            self.state = 879
            self.match(css3Parser.T__3)
            self.state = 880
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CalcContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Calc(self):
            return self.getToken(css3Parser.Calc, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def calcSum(self):
            return self.getTypedRuleContext(css3Parser.CalcSumContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_calc

        def enterRule(self, listener):
            if hasattr(listener, "enterCalc"):
                listener.enterCalc(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCalc"):
                listener.exitCalc(self)




    def calc(self):

        localctx = css3Parser.CalcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_calc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(css3Parser.Calc)
            self.state = 883
            self.ws()
            self.state = 884
            self.calcSum()
            self.state = 885
            self.match(css3Parser.T__3)
            self.state = 886
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcSumContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CalcSumContext, self).__init__(parent, invokingState)
            self.parser = parser

        def calcProduct(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.CalcProductContext)
            else:
                return self.getTypedRuleContext(css3Parser.CalcProductContext,i)


        def Space(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Space)
            else:
                return self.getToken(css3Parser.Space, i)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Plus(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Plus)
            else:
                return self.getToken(css3Parser.Plus, i)

        def Minus(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Minus)
            else:
                return self.getToken(css3Parser.Minus, i)

        def getRuleIndex(self):
            return css3Parser.RULE_calcSum

        def enterRule(self, listener):
            if hasattr(listener, "enterCalcSum"):
                listener.enterCalcSum(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCalcSum"):
                listener.exitCalcSum(self)




    def calcSum(self):

        localctx = css3Parser.CalcSumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_calcSum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.calcProduct()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Space:
                self.state = 889
                self.match(css3Parser.Space)
                self.state = 890
                self.ws()
                self.state = 891
                _la = self._input.LA(1)
                if not(_la==css3Parser.Plus or _la==css3Parser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 892
                self.ws()
                self.state = 893
                self.match(css3Parser.Space)
                self.state = 894
                self.ws()
                self.state = 895
                self.calcProduct()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcProductContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CalcProductContext, self).__init__(parent, invokingState)
            self.parser = parser

        def calcValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.CalcValueContext)
            else:
                return self.getTypedRuleContext(css3Parser.CalcValueContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NumberContext)
            else:
                return self.getTypedRuleContext(css3Parser.NumberContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_calcProduct

        def enterRule(self, listener):
            if hasattr(listener, "enterCalcProduct"):
                listener.enterCalcProduct(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCalcProduct"):
                listener.exitCalcProduct(self)




    def calcProduct(self):

        localctx = css3Parser.CalcProductContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_calcProduct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.calcValue()
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.T__6 or _la==css3Parser.T__12:
                self.state = 912
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [css3Parser.T__6]:
                    self.state = 903
                    self.match(css3Parser.T__6)
                    self.state = 904
                    self.ws()
                    self.state = 905
                    self.calcValue()
                    pass
                elif token in [css3Parser.T__12]:
                    self.state = 907
                    self.match(css3Parser.T__12)
                    self.state = 908
                    self.ws()
                    self.state = 909
                    self.number()
                    self.state = 910
                    self.ws()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CalcValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(css3Parser.NumberContext,0)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def dimension(self):
            return self.getTypedRuleContext(css3Parser.DimensionContext,0)


        def unknownDimension(self):
            return self.getTypedRuleContext(css3Parser.UnknownDimensionContext,0)


        def percentage(self):
            return self.getTypedRuleContext(css3Parser.PercentageContext,0)


        def calcSum(self):
            return self.getTypedRuleContext(css3Parser.CalcSumContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_calcValue

        def enterRule(self, listener):
            if hasattr(listener, "enterCalcValue"):
                listener.enterCalcValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCalcValue"):
                listener.exitCalcValue(self)




    def calcValue(self):

        localctx = css3Parser.CalcValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_calcValue)
        try:
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.number()
                self.state = 918
                self.ws()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.dimension()
                self.state = 921
                self.ws()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.unknownDimension()
                self.state = 924
                self.ws()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 926
                self.percentage()
                self.state = 927
                self.ws()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 929
                self.match(css3Parser.T__1)
                self.state = 930
                self.ws()
                self.state = 931
                self.calcSum()
                self.state = 932
                self.match(css3Parser.T__3)
                self.state = 933
                self.ws()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FontFaceRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FontFaceRuleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FontFace(self):
            return self.getToken(css3Parser.FontFace, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def fontFaceDeclaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.FontFaceDeclarationContext)
            else:
                return self.getTypedRuleContext(css3Parser.FontFaceDeclarationContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_fontFaceRule

        def enterRule(self, listener):
            if hasattr(listener, "enterFontFaceRule"):
                listener.enterFontFaceRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFontFaceRule"):
                listener.exitFontFaceRule(self)




    def fontFaceRule(self):

        localctx = css3Parser.FontFaceRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fontFaceRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(css3Parser.FontFace)
            self.state = 938
            self.ws()
            self.state = 939
            self.match(css3Parser.T__4)
            self.state = 940
            self.ws()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                self.state = 941
                self.fontFaceDeclaration()


            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.T__0:
                self.state = 944
                self.match(css3Parser.T__0)
                self.state = 945
                self.ws()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                    self.state = 946
                    self.fontFaceDeclaration()


                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 954
            self.match(css3Parser.T__5)
            self.state = 955
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FontFaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FontFaceDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return css3Parser.RULE_fontFaceDeclaration

     
        def copyFrom(self, ctx):
            super(css3Parser.FontFaceDeclarationContext, self).copyFrom(ctx)



    class KnownFontFaceDeclarationContext(FontFaceDeclarationContext):

        def __init__(self, parser, ctx): # actually a css3Parser.FontFaceDeclarationContext)
            super(css3Parser.KnownFontFaceDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def property(self):
            return self.getTypedRuleContext(css3Parser.PropertyContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def expr(self):
            return self.getTypedRuleContext(css3Parser.ExprContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterKnownFontFaceDeclaration"):
                listener.enterKnownFontFaceDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKnownFontFaceDeclaration"):
                listener.exitKnownFontFaceDeclaration(self)


    class UnknownFontFaceDeclarationContext(FontFaceDeclarationContext):

        def __init__(self, parser, ctx): # actually a css3Parser.FontFaceDeclarationContext)
            super(css3Parser.UnknownFontFaceDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def property(self):
            return self.getTypedRuleContext(css3Parser.PropertyContext,0)

        def ws(self):
            return self.getTypedRuleContext(css3Parser.WsContext,0)

        def value(self):
            return self.getTypedRuleContext(css3Parser.ValueContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnknownFontFaceDeclaration"):
                listener.enterUnknownFontFaceDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnknownFontFaceDeclaration"):
                listener.exitUnknownFontFaceDeclaration(self)



    def fontFaceDeclaration(self):

        localctx = css3Parser.FontFaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fontFaceDeclaration)
        try:
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = css3Parser.KnownFontFaceDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.property()
                self.state = 958
                self.match(css3Parser.T__2)
                self.state = 959
                self.ws()
                self.state = 960
                self.expr()
                pass

            elif la_ == 2:
                localctx = css3Parser.UnknownFontFaceDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.property()
                self.state = 963
                self.match(css3Parser.T__2)
                self.state = 964
                self.ws()
                self.state = 965
                self.value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyframesRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.KeyframesRuleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Keyframes(self):
            return self.getToken(css3Parser.Keyframes, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Space(self):
            return self.getToken(css3Parser.Space, 0)

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def keyframesBlocks(self):
            return self.getTypedRuleContext(css3Parser.KeyframesBlocksContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_keyframesRule

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyframesRule"):
                listener.enterKeyframesRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyframesRule"):
                listener.exitKeyframesRule(self)




    def keyframesRule(self):

        localctx = css3Parser.KeyframesRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_keyframesRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(css3Parser.Keyframes)
            self.state = 970
            self.ws()
            self.state = 971
            self.match(css3Parser.Space)
            self.state = 972
            self.ws()
            self.state = 973
            self.ident()
            self.state = 974
            self.ws()
            self.state = 975
            self.match(css3Parser.T__4)
            self.state = 976
            self.ws()
            self.state = 977
            self.keyframesBlocks()
            self.state = 978
            self.match(css3Parser.T__5)
            self.state = 979
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyframesBlocksContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.KeyframesBlocksContext, self).__init__(parent, invokingState)
            self.parser = parser

        def keyframeSelector(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.KeyframeSelectorContext)
            else:
                return self.getTypedRuleContext(css3Parser.KeyframeSelectorContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def declarationList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.DeclarationListContext)
            else:
                return self.getTypedRuleContext(css3Parser.DeclarationListContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_keyframesBlocks

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyframesBlocks"):
                listener.enterKeyframesBlocks(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyframesBlocks"):
                listener.exitKeyframesBlocks(self)




    def keyframesBlocks(self):

        localctx = css3Parser.KeyframesBlocksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_keyframesBlocks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Percentage) | (1 << css3Parser.From) | (1 << css3Parser.To))) != 0):
                self.state = 981
                self.keyframeSelector()
                self.state = 982
                self.match(css3Parser.T__4)
                self.state = 983
                self.ws()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                    self.state = 984
                    self.declarationList()


                self.state = 987
                self.match(css3Parser.T__5)
                self.state = 988
                self.ws()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyframeSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.KeyframeSelectorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def From(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.From)
            else:
                return self.getToken(css3Parser.From, i)

        def To(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.To)
            else:
                return self.getToken(css3Parser.To, i)

        def Percentage(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Percentage)
            else:
                return self.getToken(css3Parser.Percentage, i)

        def Comma(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comma)
            else:
                return self.getToken(css3Parser.Comma, i)

        def getRuleIndex(self):
            return css3Parser.RULE_keyframeSelector

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyframeSelector"):
                listener.enterKeyframeSelector(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyframeSelector"):
                listener.exitKeyframeSelector(self)




    def keyframeSelector(self):

        localctx = css3Parser.KeyframeSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_keyframeSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Percentage) | (1 << css3Parser.From) | (1 << css3Parser.To))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 996
            self.ws()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.Comma:
                self.state = 997
                self.match(css3Parser.Comma)
                self.state = 998
                self.ws()
                self.state = 999
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.Percentage) | (1 << css3Parser.From) | (1 << css3Parser.To))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1000
                self.ws()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ViewportContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.ViewportContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Viewport(self):
            return self.getToken(css3Parser.Viewport, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def declarationList(self):
            return self.getTypedRuleContext(css3Parser.DeclarationListContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_viewport

        def enterRule(self, listener):
            if hasattr(listener, "enterViewport"):
                listener.enterViewport(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitViewport"):
                listener.exitViewport(self)




    def viewport(self):

        localctx = css3Parser.ViewportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_viewport)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(css3Parser.Viewport)
            self.state = 1008
            self.ws()
            self.state = 1009
            self.match(css3Parser.T__4)
            self.state = 1010
            self.ws()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                self.state = 1011
                self.declarationList()


            self.state = 1014
            self.match(css3Parser.T__5)
            self.state = 1015
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CounterStyleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.CounterStyleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CounterStyle(self):
            return self.getToken(css3Parser.CounterStyle, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(css3Parser.DeclarationListContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_counterStyle

        def enterRule(self, listener):
            if hasattr(listener, "enterCounterStyle"):
                listener.enterCounterStyle(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCounterStyle"):
                listener.exitCounterStyle(self)




    def counterStyle(self):

        localctx = css3Parser.CounterStyleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_counterStyle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(css3Parser.CounterStyle)
            self.state = 1018
            self.ws()
            self.state = 1019
            self.ident()
            self.state = 1020
            self.ws()
            self.state = 1021
            self.match(css3Parser.T__4)
            self.state = 1022
            self.ws()
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13) | (1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Variable) | (1 << css3Parser.Ident))) != 0):
                self.state = 1023
                self.declarationList()


            self.state = 1026
            self.match(css3Parser.T__5)
            self.state = 1027
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FontFeatureValuesRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FontFeatureValuesRuleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FontFeatureValues(self):
            return self.getToken(css3Parser.FontFeatureValues, 0)

        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def fontFamilyNameList(self):
            return self.getTypedRuleContext(css3Parser.FontFamilyNameListContext,0)


        def featureValueBlock(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.FeatureValueBlockContext)
            else:
                return self.getTypedRuleContext(css3Parser.FeatureValueBlockContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_fontFeatureValuesRule

        def enterRule(self, listener):
            if hasattr(listener, "enterFontFeatureValuesRule"):
                listener.enterFontFeatureValuesRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFontFeatureValuesRule"):
                listener.exitFontFeatureValuesRule(self)




    def fontFeatureValuesRule(self):

        localctx = css3Parser.FontFeatureValuesRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fontFeatureValuesRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(css3Parser.FontFeatureValues)
            self.state = 1030
            self.ws()
            self.state = 1031
            self.fontFamilyNameList()
            self.state = 1032
            self.ws()
            self.state = 1033
            self.match(css3Parser.T__4)
            self.state = 1034
            self.ws()
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==css3Parser.T__14:
                self.state = 1035
                self.featureValueBlock()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1041
            self.match(css3Parser.T__5)
            self.state = 1042
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FontFamilyNameListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FontFamilyNameListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fontFamilyName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.FontFamilyNameContext)
            else:
                return self.getTypedRuleContext(css3Parser.FontFamilyNameContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def Comma(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comma)
            else:
                return self.getToken(css3Parser.Comma, i)

        def getRuleIndex(self):
            return css3Parser.RULE_fontFamilyNameList

        def enterRule(self, listener):
            if hasattr(listener, "enterFontFamilyNameList"):
                listener.enterFontFamilyNameList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFontFamilyNameList"):
                listener.exitFontFamilyNameList(self)




    def fontFamilyNameList(self):

        localctx = css3Parser.FontFamilyNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fontFamilyNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.fontFamilyName()
            self.state = 1052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1045
                    self.ws()
                    self.state = 1046
                    self.match(css3Parser.Comma)
                    self.state = 1047
                    self.ws()
                    self.state = 1048
                    self.fontFamilyName() 
                self.state = 1054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FontFamilyNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FontFamilyNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def String(self):
            return self.getToken(css3Parser.String, 0)

        def ident(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.IdentContext)
            else:
                return self.getTypedRuleContext(css3Parser.IdentContext,i)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_fontFamilyName

        def enterRule(self, listener):
            if hasattr(listener, "enterFontFamilyName"):
                listener.enterFontFamilyName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFontFamilyName"):
                listener.exitFontFamilyName(self)




    def fontFamilyName(self):

        localctx = css3Parser.FontFamilyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fontFamilyName)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [css3Parser.String]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.match(css3Parser.String)
                pass
            elif token in [css3Parser.MediaOnly, css3Parser.Not, css3Parser.And, css3Parser.Or, css3Parser.From, css3Parser.To, css3Parser.Ident]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.ident()
                self.state = 1062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1057
                        self.ws()
                        self.state = 1058
                        self.ident() 
                    self.state = 1064
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FeatureValueBlockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FeatureValueBlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def featureType(self):
            return self.getTypedRuleContext(css3Parser.FeatureTypeContext,0)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def featureValueDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.FeatureValueDefinitionContext)
            else:
                return self.getTypedRuleContext(css3Parser.FeatureValueDefinitionContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_featureValueBlock

        def enterRule(self, listener):
            if hasattr(listener, "enterFeatureValueBlock"):
                listener.enterFeatureValueBlock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFeatureValueBlock"):
                listener.exitFeatureValueBlock(self)




    def featureValueBlock(self):

        localctx = css3Parser.FeatureValueBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_featureValueBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.featureType()
            self.state = 1068
            self.ws()
            self.state = 1069
            self.match(css3Parser.T__4)
            self.state = 1070
            self.ws()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0):
                self.state = 1071
                self.featureValueDefinition()


            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.Comment) | (1 << css3Parser.Space))) != 0):
                self.state = 1074
                self.ws()
                self.state = 1075
                self.match(css3Parser.T__0)
                self.state = 1076
                self.ws()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0):
                    self.state = 1077
                    self.featureValueDefinition()


                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1085
            self.match(css3Parser.T__5)
            self.state = 1086
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FeatureTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FeatureTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atKeyword(self):
            return self.getTypedRuleContext(css3Parser.AtKeywordContext,0)


        def getRuleIndex(self):
            return css3Parser.RULE_featureType

        def enterRule(self, listener):
            if hasattr(listener, "enterFeatureType"):
                listener.enterFeatureType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFeatureType"):
                listener.exitFeatureType(self)




    def featureType(self):

        localctx = css3Parser.FeatureTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_featureType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.atKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FeatureValueDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.FeatureValueDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(css3Parser.IdentContext,0)


        def ws(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.WsContext)
            else:
                return self.getTypedRuleContext(css3Parser.WsContext,i)


        def number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(css3Parser.NumberContext)
            else:
                return self.getTypedRuleContext(css3Parser.NumberContext,i)


        def getRuleIndex(self):
            return css3Parser.RULE_featureValueDefinition

        def enterRule(self, listener):
            if hasattr(listener, "enterFeatureValueDefinition"):
                listener.enterFeatureValueDefinition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFeatureValueDefinition"):
                listener.exitFeatureValueDefinition(self)




    def featureValueDefinition(self):

        localctx = css3Parser.FeatureValueDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_featureValueDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.ident()
            self.state = 1091
            self.ws()
            self.state = 1092
            self.match(css3Parser.T__2)
            self.state = 1093
            self.ws()
            self.state = 1094
            self.number()
            self.state = 1100
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1095
                    self.ws()
                    self.state = 1096
                    self.number() 
                self.state = 1102
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.IdentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(css3Parser.Ident, 0)

        def MediaOnly(self):
            return self.getToken(css3Parser.MediaOnly, 0)

        def Not(self):
            return self.getToken(css3Parser.Not, 0)

        def And(self):
            return self.getToken(css3Parser.And, 0)

        def Or(self):
            return self.getToken(css3Parser.Or, 0)

        def From(self):
            return self.getToken(css3Parser.From, 0)

        def To(self):
            return self.getToken(css3Parser.To, 0)

        def getRuleIndex(self):
            return css3Parser.RULE_ident

        def enterRule(self, listener):
            if hasattr(listener, "enterIdent"):
                listener.enterIdent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdent"):
                listener.exitIdent(self)




    def ident(self):

        localctx = css3Parser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ident)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << css3Parser.MediaOnly) | (1 << css3Parser.Not) | (1 << css3Parser.And) | (1 << css3Parser.Or) | (1 << css3Parser.From) | (1 << css3Parser.To) | (1 << css3Parser.Ident))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(css3Parser.WsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Comment(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Comment)
            else:
                return self.getToken(css3Parser.Comment, i)

        def Space(self, i=None):
            if i is None:
                return self.getTokens(css3Parser.Space)
            else:
                return self.getToken(css3Parser.Space, i)

        def getRuleIndex(self):
            return css3Parser.RULE_ws

        def enterRule(self, listener):
            if hasattr(listener, "enterWs"):
                listener.enterWs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWs"):
                listener.exitWs(self)




    def ws(self):

        localctx = css3Parser.WsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ws)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1105
                    _la = self._input.LA(1)
                    if not(_la==css3Parser.Comment or _la==css3Parser.Space):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1110
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





